% Running on host: tank

% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[Father/train/train_pos.txt, Father/train/train_neg.txt, Father/train/train_bk.txt, Father/train/train_facts.txt]
%  for N=0: args[N]=Father/train/train_pos.txt

% getInputArgWithDefaultValue: args=[Father/train/train_pos.txt, Father/train/train_neg.txt, Father/train/train_bk.txt, Father/train/train_facts.txt]
%  for N=1: args[N]=Father/train/train_neg.txt

% getInputArgWithDefaultValue: args=[Father/train/train_pos.txt, Father/train/train_neg.txt, Father/train/train_bk.txt, Father/train/train_facts.txt]
%  for N=2: args[N]=Father/train/train_bk.txt

% getInputArgWithDefaultValue: args=[Father/train/train_pos.txt, Father/train/train_neg.txt, Father/train/train_bk.txt, Father/train/train_facts.txt]
%  for N=3: args[N]=Father/train/train_facts.txt

% Welcome to the WILL ILP/SRL systems.


% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.
% Reading background theory from dir: null
% Load '../background.txt'.

% Switching to VarIndicator = uppercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****


***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.
% LoadAllModes() called.  Currently loaded modes: []
% [ LazyGroundClauseIndex ]  Building full index for sameAs/2 with 2 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for exp/3.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for log/3.
% LoadAllLibraries() called.  Currently loaded libraries: [listsInLogic, differentInLogic, modes_arithmeticInLogic, inlines_comparisonInLogic, modes_listsInLogic, inlines_differentInLogic, modes_differentInLogic, arithmeticInLogic, inlines_listsInLogic, modes_comparisonInLogic, comparisonInLogic, inlines_arithmeticInLogic]

%  Read the facts.
%  Have read 41 facts.
% Have read 5 examples from 'Father/train' [Father/train/train*].
% Have read 21 examples from 'Father/train' [Father/train/train*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% NEW target:                 father(D, E)
%  targetPred:                father/2
%  targetArgTypes:            signature = [const, const], types = [+name, +name]
%  targets:                   [father(D, E)]
%  targetPredicates:          [father/2]
%  targetArgSpecs:            [[D[+name], E[+name]]]
%  variablesInTargets:        [[D, E]]

% Started collecting constants

% Collecting the types of constants.

% Looking at the training examples to see if any types of new constants can be inferred.
% Time to collect constants: 2 milliseconds
% Time to collect examples: 0 seconds

% Read 5 pos examples and 21 neg examples.
% Time to init learnOneClause: 8 milliseconds
% Old dirnull
Setting model dir

% Have 5 'raw' positive examples and kept 5.
% Have 21 'raw' negative examples and kept 21.

% processing backup's for father
%  POS EX = 5
%  NEG EX = 21

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0
Father/train/models/
File: Father/train/advice.txt doesnt exist.Hence no advice loaded
% Learning 25 trees in this iteration for father

% Learn model for: father
% Kept 5 of the 5 positive examples.
% Kept 11 of the 21 negative examples.
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.21484375
Set score:0.0025
% Dataset size: 16
Computing probabilities
prob time:1 milliseconds
No hidden examples for : father
Time to build dataset: 1 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.2148437499999998
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 0 1 2 3 4 5 6 7 8 11
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% LearnOneClause Parameters:
%   Targets (1):
%    father(+name, +name)
%  Modes (39):
%    male(+name),
%    childof(+name, +name),
%    siblingof(+name, -name),
%    addList(+willList, #willNumber),
%    multiplyList(+willList, #willNumber),
%    abs(+willNumber, &willNumber),
%    minus(+willNumber, &willNumber),
%    minus(+willNumber, +willNumber, &willNumber),
%    plus(+willNumber, +willNumber, &willNumber),
%    mult(+willNumber, +willNumber, &willNumber),
%    div(+willNumber, +willNumber, &willNumber),
%    allNumbers(+willList),
%    positiveNumber(+willNumber),
%    negativeNumber(+willNumber),
%    in0toDot001(+willNumber),
%    in0toDot01(+willNumber),
%    in0toDot1(+willNumber),
%    in0to1(+willNumber),
%    in0to10(+willNumber),
%    in0to100(+willNumber),
%    in0to1000(+willNumber),
%    equalWithTolerance(+willNumber, +willNumber, &willNumber),
%    greaterOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    smallerOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    isaEqualTolerance(+willNumber),
%    lessThan(+willNumber, +willNumber),
%    greaterThan(+willNumber, +willNumber),
%    lessThanOrEqual(+willNumber, +willNumber),
%    greaterThanOrEqual(+willNumber, +willNumber),
%    inBetweenOO(+willNumber, +willNumber, +willNumber),
%    inBetweenCO(+willNumber, +willNumber, +willNumber),
%    inBetweenOC(+willNumber, +willNumber, +willNumber),
%    inBetweenCC(+willNumber, +willNumber, +willNumber),
%    memberOfList(+willAnything, +willList),
%    firstInList(+willList, &willAnything),
%    restOfList(+willList, &willList),
%    positionInList(+willAnything, +willList, &willNumber),
%    nthInList(+willNumber, +willList, &willAnything),
%    lengthOfList(+willList, &willNumber)

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 16.0/16.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 16.0/16.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 16.0/16.0 pos, 0.0/0.0 neg]' score=-Infinity
% [ LazyGroundClauseIndex ]  Building full index for male/1 with 13 assertions.
% [ LazyGroundClauseIndex ]  Building full index for childof/2 with 16 assertions.
% [ LazyGroundClauseIndex ]  Building full index for siblingof/2 with 12 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for siblingof/2.
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -3.345456 (regressionFit = 3.345455, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 11.0/16.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -3.345456): father(A, _) :- male(A).  [covers 11.0/16.0 pos, 0.0/0.0 neg]
%     Score = -2.500001 (regressionFit = 2.500000, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 10.0/16.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -2.500001): father(_, A) :- male(A).  [covers 10.0/16.0 pos, 0.0/0.0 neg]
%     Score = -0.833334 (regressionFit = 0.833333, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 6.0/16.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.833334): father(A, B) :- childof(B, A).  [covers 6.0/16.0 pos, 0.0/0.0 neg]
%     Score = -3.375001 (regressionFit = 3.375000, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 8.0/16.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 6.0/16.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 6.0/16.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(A, B) :- childof(B, A).  [covers 6.0/16.0 pos, 0.0/0.0 neg]
Comparing variance: 0.1388888888888887 to score=0.0025 #egs=6.0
Comparing variance: -1.1102230246251566E-17 to score=0.0025 #egs=10.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 6.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 29 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(A, B) :- childof(B, A).  [covers 6.0/16.0 pos, 0.0/0.0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #1 @ 12:29:19 4/20/17.  [Using 3,310,120 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( childof(B, A) )
%   then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */


% Clauses:

father(A, B, 0.6914822684328455) :- 
     childof(B, A), 
     !. // Clause #1.

father(A, B, -0.1418510649004878) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_father(a, b, 0.6914822684328455) :-  /* #neg=1 #pos=5 */ 
   childof(b, a),
   !. // Flattened version of clause #1.

flattened_father(underscore, underscore, -0.1418510649004878) :-  /* #neg=10 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   childof(b, a)

% Saving model in: Father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 1 trees is 116 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.2148437499999998
Set score:0.0025
% Only 16 out of 16 converged.
% Kept 5 of the 5 positive examples.
% Kept 12 of the 21 negative examples.
% Dataset size: 17
Computing probabilities
prob time:1 milliseconds
No hidden examples for : father
Time to build dataset: 3 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.1731515087333193
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 0 1 3 4 5 7 8 9 14 15
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 17.0/17.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 17.0/17.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 17.0/17.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -2.857873 (regressionFit = 2.857872, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -2.857873): father(A, _) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]
%     Score = -2.262882 (regressionFit = 2.262881, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -2.262882): father(_, A) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]
%     Score = -1.875001 (regressionFit = 1.875000, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 8.0/17.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -1.875001): father(A, B) :- childof(B, A).  [covers 8.0/17.0 pos, 0.0/0.0 neg]
%     Score = -2.766224 (regressionFit = 2.766223, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7.0/17.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 8.0/17.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 8.0/17.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(A, B) :- childof(B, A).  [covers 8.0/17.0 pos, 0.0/0.0 neg]
Comparing variance: 0.23437499999999994 to score=0.0025 #egs=8.0
Comparing variance: 0.0 to score=0.0025 #egs=9.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 8.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.234375)
%         ILP node to extend: father(A, B) :- childof(B, A).  [covers 8.0/17.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0.234375) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 15 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(A, B) :- childof(B, A).  [covers 8.0/17.0 pos, 0.0/0.0 neg]
% This clause covers 8 positive examples, of which 8 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'father(A, B) :- childof(B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]'
%     Score = -1.875001 (regressionFit = 1.875000, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

***** Warning: % Have only 8 positive examples, so cannot choose 10 of them. *****


% Have these 8 positive seeds: 0 1 2 3 4 5 6 7
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'father(A, B) :- childof(B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-1.8750010199999996
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -1.466669 (regressionFit = 1.466667, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(A).  [covers 5.0/8.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -1.466669): father(A, B) :- childof(B, A), male(A).  [covers 5.0/8.0 pos, 0.0/0.0 neg]
%     Score = -0.000002 (regressionFit = 0.000000, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(B).  [covers 5.0/8.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000002): father(A, B) :- childof(B, A), male(B).  [covers 5.0/8.0 pos, 0.0/0.0 neg]
%     Score = -1.750002 (regressionFit = 1.750000, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _).  [covers 4.0/8.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A), male(B).  [covers 5.0/8.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A), male(B).  [covers 5.0/8.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.234.
% Will extend: father(A, B) :- childof(B, A), male(B).  [covers 5.0/8.0 pos, 0.0/0.0 neg]
Comparing variance: 0.0 to score=0.0025 #egs=5.0
Comparing variance: 0.0 to score=0.0025 #egs=3.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 5.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 3.0 < 2.1 * minPosCov = 6.3

% Time for loop #2: 10 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      father(A, B) :- childof(B, A), male(B).  [covers 5.0/8.0 pos, 0.0/0.0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #2 @ 12:29:19 4/20/17.  [Using 1,506,424 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( childof(B, A) )
%   then if ( male(B) )
%   | then return 0.7518526675222027;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.2481473324777973;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */


% Clauses:

father(A, B, 0.7518526675222027) :- 
     childof(B, A), 
     male(B), 
     !. // Clause #1.

father(A, B, -0.2481473324777973) :- 
     childof(B, A), 
     !. // Clause #2.

father(A, B, -0.12544463852839138) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_father(a, b, 0.7518526675222027) :-  /* #pos=5 */ 
   childof(b, a),
   male(b),
   !. // Flattened version of clause #1.

flattened_father(a, b, -0.2481473324777973) :-  /* #neg=3 */ 
   childof(b, a),
   !. // Flattened version of clause #2.

flattened_father(underscore, underscore, -0.12544463852839138) :-  /* #neg=9 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   childof(b, a)
%   male(b)

% Saving model in: Father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 2 trees is 192 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.23437499999999994
Set score:0.0025
% Only 17 out of 17 converged.
% Kept 5 of the 5 positive examples.
% Kept 11 of the 21 negative examples.
% Dataset size: 16
Computing probabilities
prob time:1 milliseconds
No hidden examples for : father
Time to build dataset: 2 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.1084700587425895
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 8 positive seeds: 0 1 4 5 6 7 8 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 16.0/16.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 16.0/16.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 16.0/16.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -1.674598 (regressionFit = 1.674597, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 11.0/16.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -1.674598): father(A, _) :- male(A).  [covers 11.0/16.0 pos, 0.0/0.0 neg]
%     Score = -1.515761 (regressionFit = 1.515759, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 13.0/16.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -1.515761): father(_, A) :- male(A).  [covers 13.0/16.0 pos, 0.0/0.0 neg]
%     Score = -0.524063 (regressionFit = 0.524062, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 6.0/16.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.524063): father(A, B) :- childof(B, A).  [covers 6.0/16.0 pos, 0.0/0.0 neg]
%     Score = -1.726983 (regressionFit = 1.726982, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 9.0/16.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 6.0/16.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 6.0/16.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(A, B) :- childof(B, A).  [covers 6.0/16.0 pos, 0.0/0.0 neg]
Comparing variance: 0.08734360883862613 to score=0.0025 #egs=6.0
Comparing variance: 0.0 to score=0.0025 #egs=10.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 6.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 7 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(A, B) :- childof(B, A).  [covers 6.0/16.0 pos, 0.0/0.0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #3 @ 12:29:19 4/20/17.  [Using 1,461,000 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( childof(B, A) )
%   then return 0.4560636089862555;  // std dev = 0.724, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */


% Clauses:

father(A, B, 0.4560636089862555) :- 
     childof(B, A), 
     !. // Clause #1.

father(A, B, -0.11231637819360638) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_father(a, b, 0.4560636089862555) :-  /* #neg=1 #pos=5 */ 
   childof(b, a),
   !. // Flattened version of clause #1.

flattened_father(underscore, underscore, -0.11231637819360638) :-  /* #neg=10 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   childof(b, a)

% Saving model in: Father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 3 trees is 245 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.1084700587425895
Set score:0.0025
% Only 16 out of 16 converged.
% Kept 5 of the 5 positive examples.
% Kept 15 of the 21 negative examples.
% Dataset size: 20
Computing probabilities
prob time:3 milliseconds
No hidden examples for : father
Time to build dataset: 3 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.07093446452071761
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 6 positive seeds: 3 5 11 14 15 18
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 20.0/20.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 20.0/20.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 20.0/20.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -1.366185 (regressionFit = 1.366184, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 13.0/20.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -1.366185): father(A, _) :- male(A).  [covers 13.0/20.0 pos, 0.0/0.0 neg]
%     Score = -1.116057 (regressionFit = 1.116056, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 14.0/20.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -1.116057): father(_, A) :- male(A).  [covers 14.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.834066 (regressionFit = 0.834065, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 7.0/20.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.834066): father(A, B) :- childof(B, A).  [covers 7.0/20.0 pos, 0.0/0.0 neg]
%     Score = -1.358098 (regressionFit = 1.358096, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 8.0/20.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 7.0/20.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 7.0/20.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(A, B) :- childof(B, A).  [covers 7.0/20.0 pos, 0.0/0.0 neg]
Comparing variance: 0.11915210638628004 to score=0.0025 #egs=7.0
Comparing variance: -2.135044278125301E-18 to score=0.0025 #egs=13.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 7.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.119152)
%         ILP node to extend: father(A, B) :- childof(B, A).  [covers 7.0/20.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0.119152) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 7 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(A, B) :- childof(B, A).  [covers 7.0/20.0 pos, 0.0/0.0 neg]
% This clause covers 7 positive examples, of which 7 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'father(A, B) :- childof(B, A).  [covers 7.0/7.0 pos, 0.0/0.0 neg]'
%     Score = -0.834066 (regressionFit = 0.834065, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 7.0/7.0 pos, 0.0/0.0 neg]

***** Warning: % Have only 7 positive examples, so cannot choose 8 of them. *****


% Have these 7 positive seeds: 0 1 2 3 4 5 6
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'father(A, B) :- childof(B, A).  [covers 7.0/7.0 pos, 0.0/0.0 neg]' score=-0.8340657647039603
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(A).  [covers 5.0/7.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(B).  [covers 5.0/7.0 pos, 0.0/0.0 neg]
%     Score = -0.827116 (regressionFit = 0.827114, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _).  [covers 4.0/7.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.827116): father(A, B) :- childof(B, A), siblingof(A, _).  [covers 4.0/7.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A), siblingof(A, _).  [covers 4.0/7.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A), siblingof(A, _).  [covers 4.0/7.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.119.
% Will extend: father(A, B) :- childof(B, A), siblingof(A, _).  [covers 4.0/7.0 pos, 0.0/0.0 neg]
Comparing variance: 0.10947099774239483 to score=0.0025 #egs=4.0
Comparing variance: 0.12974340473172719 to score=0.0025 #egs=3.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 4.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 3.0 < 2.1 * minPosCov = 6.3

% Time for loop #2: 7 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      father(A, B) :- childof(B, A), siblingof(A, _).  [covers 4.0/7.0 pos, 0.0/0.0 neg]
% This clause covers 4 positive examples, of which 4 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #4 @ 12:29:19 4/20/17.  [Using 1,492,760 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( childof(B, A) )
%   then if ( siblingof(A, C) )
%   | then return 0.28414637397335996;  // std dev = 0.662, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.22047156421419012;  // std dev = 0.624, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */


% Clauses:

father(A, B, 0.28414637397335996) :- 
     childof(B, A), 
     siblingof(A, C), 
     !. // Clause #1.

father(A, B, 0.22047156421419012) :- 
     childof(B, A), 
     !. // Clause #2.

father(A, B, -0.1015963294878363) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_father(a, b, 0.28414637397335996) :-  /* #neg=1 #pos=3 */ 
   childof(b, a),
   siblingof(a, underscore),
   !. // Flattened version of clause #1.

flattened_father(a, b, 0.22047156421419012) :-  /* #neg=1 #pos=2 */ 
   childof(b, a),
   !. // Flattened version of clause #2.

flattened_father(underscore, underscore, -0.1015963294878363) :-  /* #neg=13 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   siblingof(a, underscore)
%   childof(b, a)

% Saving model in: Father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 4 trees is 311 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.11915210638628003
Set score:0.0025
% Only 20 out of 20 converged.
% Kept 5 of the 5 positive examples.
% Kept 11 of the 21 negative examples.
% Dataset size: 16
Computing probabilities
prob time:1 milliseconds
No hidden examples for : father
Time to build dataset: 2 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0713779149270697
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 7 positive seeds: 2 3 4 6 7 13 14
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 16.0/16.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 16.0/16.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 16.0/16.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -1.097585 (regressionFit = 1.097584, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 11.0/16.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -1.097585): father(A, _) :- male(A).  [covers 11.0/16.0 pos, 0.0/0.0 neg]
%     Score = -0.719590 (regressionFit = 0.719589, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 10.0/16.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.719590): father(_, A) :- male(A).  [covers 10.0/16.0 pos, 0.0/0.0 neg]
%     Score = -0.814402 (regressionFit = 0.814401, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 7.0/16.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 2.0/16.0 pos, 0.0/0.0 neg]
%     Score = -1.110478 (regressionFit = 1.110477, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7.0/16.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 2.0/16.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 2.0/16.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 10.0/16.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 10.0/16.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(_, A) :- male(A).  [covers 10.0/16.0 pos, 0.0/0.0 neg]
Comparing variance: 0.06356725739024995 to score=0.0025 #egs=10.0
Comparing variance: 0.013986059904789272 to score=0.0025 #egs=6.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 10.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.063567)
%         ILP node to extend: father(_, A) :- male(A).  [covers 10.0/16.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0.063567) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 6.0 < 2.1 * minPosCov = 6.3

% Time for loop #1: 6 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(_, A) :- male(A).  [covers 10.0/16.0 pos, 0.0/0.0 neg]
% This clause covers 10 positive examples, of which 10 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'father(_, A) :- male(A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]'
%     Score = -0.719590 (regressionFit = 0.719589, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]

% Have these 7 positive seeds: 1 3 4 5 7 8 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'father(_, A) :- male(A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-0.719590053331235
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 8.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000288 (regressionFit = 0.000286, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5.0/10.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000288): father(A, B) :- male(B), childof(B, A).  [covers 5.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(A, B).  [covers 2.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.613857 (regressionFit = 0.613855, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 5.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(B, A).  [covers 2.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  father(_, A) :- male(A), siblingof(A, _).  [covers 2.0/10.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/10.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/10.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.064.
% Will extend: father(A, B) :- male(B), childof(B, A).  [covers 5.0/10.0 pos, 0.0/0.0 neg]
Comparing variance: 5.717898857251491E-5 to score=0.0025 #egs=5.0
Comparing variance: 0.0 to score=0.0025 #egs=5.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 5.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #2: 7 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      father(A, B) :- male(B), childof(B, A).  [covers 5.0/10.0 pos, 0.0/0.0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #5 @ 12:29:19 4/20/17.  [Using 1,504,200 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( male(B) )
%   then if ( childof(B, A) )
%   | then return 0.4114462760560114;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.09269127618926096;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.17626425571367568;  // std dev = 0.290, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */


% Clauses:

father(A, B, 0.4114462760560114) :- 
     male(B), 
     childof(B, A), 
     !. // Clause #1.

father(A, B, -0.09269127618926096) :- 
     male(B), 
     !. // Clause #2.

father(A, B, -0.17626425571367568) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_father(a, b, 0.4114462760560114) :-  /* #pos=5 */ 
   male(b),
   childof(b, a),
   !. // Flattened version of clause #1.

flattened_father(underscore, a, -0.09269127618926096) :-  /* #neg=5 */ 
   male(a),
   !. // Flattened version of clause #2.

flattened_father(underscore, underscore, -0.17626425571367568) :-  /* #neg=6 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   male(b)
%   childof(b, a)
%   male(a)

% Saving model in: Father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 5 trees is 374 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.06356725739024995
Set score:0.0025
% Only 16 out of 16 converged.
% Kept 5 of the 5 positive examples.
% Kept 14 of the 21 negative examples.
% Dataset size: 19
Computing probabilities
prob time:2 milliseconds
No hidden examples for : father
Time to build dataset: 2 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.04049046547272653
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 6 positive seeds: 5 9 12 13 17 18
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 19.0/19.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 19.0/19.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 19.0/19.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.662122 (regressionFit = 0.662121, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 11.0/19.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.662122): father(A, _) :- male(A).  [covers 11.0/19.0 pos, 0.0/0.0 neg]
%     Score = -0.544141 (regressionFit = 0.544140, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 12.0/19.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.544141): father(_, A) :- male(A).  [covers 12.0/19.0 pos, 0.0/0.0 neg]
%     Score = -0.552169 (regressionFit = 0.552168, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 7.0/19.0 pos, 0.0/0.0 neg]
%     Score = -0.750587 (regressionFit = 0.750585, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 8.0/19.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 12.0/19.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 12.0/19.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(_, A) :- male(A).  [covers 12.0/19.0 pos, 0.0/0.0 neg]
Comparing variance: 0.039259895077604696 to score=0.0025 #egs=12.0
Comparing variance: 0.01043163641127387 to score=0.0025 #egs=7.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 12.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.039260)
%         ILP node to extend: father(_, A) :- male(A).  [covers 12.0/19.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0.039260) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 7.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.010432)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0.010432) into the LAST position (#2) in the search queue.

% Time for loop #1: 6 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(_, A) :- male(A).  [covers 12.0/19.0 pos, 0.0/0.0 neg]
% This clause covers 12 positive examples, of which 12 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'father(_, A) :- male(A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]'
%     Score = -0.544141 (regressionFit = 0.544140, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]

% Have these 5 positive seeds: 0 1 4 7 10
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'father(_, A) :- male(A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]' score=-0.5441413158101734
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.443092 (regressionFit = 0.443090, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 8.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.443092): father(A, B) :- male(B), male(A).  [covers 8.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.000231 (regressionFit = 0.000229, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000231): father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.459795 (regressionFit = 0.459792, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 6.0/12.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.039.
% Will extend: father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
Comparing variance: 4.5758296941200705E-5 to score=0.0025 #egs=5.0
Comparing variance: 9.912705577010326E-19 to score=0.0025 #egs=7.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 5.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #2: 5 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 7 positive seeds: 0 1 2 3 4 5 6
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 7.0/7.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 7.0/7.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #3, bodyLen=0] 'father(_, _).  [covers 7.0/7.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -0.051143 (regressionFit = 0.051142, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 3.0/7.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.051143): father(A, _) :- male(A).  [covers 3.0/7.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 2.0/7.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 2.0/7.0 pos, 0.0/0.0 neg]

% The best node found: father(A, _) :- male(A).  [covers 3.0/7.0 pos, 0.0/0.0 neg]

% The best node found: father(A, _) :- male(A).  [covers 3.0/7.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.010.
% Will extend: father(A, _) :- male(A).  [covers 3.0/7.0 pos, 0.0/0.0 neg]
Comparing variance: 0.0 to score=0.0025 #egs=3.0
Comparing variance: 0.012785580690593483 to score=0.0025 #egs=4.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 3.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 4.0 < 2.1 * minPosCov = 6.3

% Time for loop #3: 4 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      father(A, _) :- male(A).  [covers 3.0/7.0 pos, 0.0/0.0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #6 @ 12:29:20 4/20/17.  [Using 1,517,312 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( male(B) )
%   then if ( childof(B, A) )
%   | then return 0.31662115034450283;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( male(A) )
%   | then return -0.07889380203092126;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.1918664848705507;  // std dev = 0.226, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


% Clauses:

father(A, B, 0.31662115034450283) :- 
     male(B), 
     childof(B, A), 
     !. // Clause #1.

father(A, B, -0.08518475138839687) :- 
     male(B), 
     !. // Clause #2.

father(A, B, -0.07889380203092126) :- 
     male(A), 
     !. // Clause #3.

father(A, B, -0.1918664848705507) :- !. // Clause #4.


% The flattened versions of these clauses:

flattened_father(a, b, 0.31662115034450283) :-  /* #pos=5 */ 
   male(b),
   childof(b, a),
   !. // Flattened version of clause #1.

flattened_father(underscore, a, -0.08518475138839687) :-  /* #neg=7 */ 
   male(a),
   !. // Flattened version of clause #2.

flattened_father(a, underscore, -0.07889380203092126) :-  /* #neg=3 */ 
   male(a),
   !. // Flattened version of clause #3.

flattened_father(underscore, underscore, -0.1918664848705507) :-  /* #neg=4 */ 
   !. // Flattened version of clause #4.


% The unique flattened literals:
%   male(b)
%   childof(b, a)
%   male(a)

% Saving model in: Father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 6 trees is 444 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.010431636411273874
Set score:0.0025
% Only 19 out of 19 converged.
% Kept 5 of the 5 positive examples.
% Kept 14 of the 21 negative examples.
% Dataset size: 19
Computing probabilities
prob time:2 milliseconds
No hidden examples for : father
Time to build dataset: 3 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.024380427561071758
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 4 positive seeds: 2 3 8 11
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 19.0/19.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 19.0/19.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 19.0/19.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.439067 (regressionFit = 0.439066, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 13.0/19.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.439067): father(A, _) :- male(A).  [covers 13.0/19.0 pos, 0.0/0.0 neg]
%     Score = -0.392476 (regressionFit = 0.392475, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 15.0/19.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.392476): father(_, A) :- male(A).  [covers 15.0/19.0 pos, 0.0/0.0 neg]
%     Score = -0.218765 (regressionFit = 0.218764, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 6.0/19.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.218765): father(A, B) :- childof(B, A).  [covers 6.0/19.0 pos, 0.0/0.0 neg]
%     Score = -0.436256 (regressionFit = 0.436254, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 8.0/19.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 6.0/19.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 6.0/19.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(A, B) :- childof(B, A).  [covers 6.0/19.0 pos, 0.0/0.0 neg]
Comparing variance: 0.036430828489971395 to score=0.0025 #egs=6.0
Comparing variance: 1.3736378524669178E-5 to score=0.0025 #egs=13.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 6.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 5 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(A, B) :- childof(B, A).  [covers 6.0/19.0 pos, 0.0/0.0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #7 @ 12:29:20 4/20/17.  [Using 1,519,008 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( childof(B, A) )
%   then return 0.1670657844303416;  // std dev = 0.468, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.07696098522861775;  // std dev = 0.013, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */


% Clauses:

father(A, B, 0.1670657844303416) :- 
     childof(B, A), 
     !. // Clause #1.

father(A, B, -0.07696098522861775) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_father(a, b, 0.1670657844303416) :-  /* #neg=1 #pos=5 */ 
   childof(b, a),
   !. // Flattened version of clause #1.

flattened_father(underscore, underscore, -0.07696098522861775) :-  /* #neg=13 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   childof(b, a)

% Saving model in: Father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 7 trees is 490 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.024380427561071758
Set score:0.0025
% Only 19 out of 19 converged.
% Kept 5 of the 5 positive examples.
% Kept 13 of the 21 negative examples.
% Dataset size: 18
Computing probabilities
prob time:3 milliseconds
No hidden examples for : father
Time to build dataset: 3 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.026559182165756125
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 7 positive seeds: 2 4 5 6 9 10 11
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 18.0/18.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 18.0/18.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 18.0/18.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.415506 (regressionFit = 0.415505, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 12.0/18.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.415506): father(A, _) :- male(A).  [covers 12.0/18.0 pos, 0.0/0.0 neg]
%     Score = -0.327470 (regressionFit = 0.327469, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 12.0/18.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.327470): father(_, A) :- male(A).  [covers 12.0/18.0 pos, 0.0/0.0 neg]
%     Score = -0.389357 (regressionFit = 0.389356, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 7.0/18.0 pos, 0.0/0.0 neg]
%     Score = -0.470540 (regressionFit = 0.470538, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 8.0/18.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 12.0/18.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 12.0/18.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(_, A) :- male(A).  [covers 12.0/18.0 pos, 0.0/0.0 neg]
Comparing variance: 0.021244706988212497 to score=0.0025 #egs=12.0
Comparing variance: 0.012088715072067149 to score=0.0025 #egs=6.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 12.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.021245)
%         ILP node to extend: father(_, A) :- male(A).  [covers 12.0/18.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0.021245) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 6.0 < 2.1 * minPosCov = 6.3

% Time for loop #1: 5 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(_, A) :- male(A).  [covers 12.0/18.0 pos, 0.0/0.0 neg]
% This clause covers 12 positive examples, of which 12 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'father(_, A) :- male(A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]'
%     Score = -0.327470 (regressionFit = 0.327469, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]

% Have these 7 positive seeds: 0 1 2 3 4 5 7
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'father(_, A) :- male(A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]' score=-0.32746989429095286
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.252213 (regressionFit = 0.252211, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.252213): father(A, B) :- male(B), male(A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.000148 (regressionFit = 0.000146, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000148): father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.232173 (regressionFit = 0.232171, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 5.0/12.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.021.
% Will extend: father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
Comparing variance: 2.9260325425362053E-5 to score=0.0025 #egs=5.0
Comparing variance: -9.912705577010326E-19 to score=0.0025 #egs=7.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 5.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #2: 5 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #8 @ 12:29:20 4/20/17.  [Using 1,534,384 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( male(B) )
%   then if ( childof(B, A) )
%   | then return 0.2221919789288626;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07336957795551384;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.14425275664768974;  // std dev = 0.269, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */


% Clauses:

father(A, B, 0.2221919789288626) :- 
     male(B), 
     childof(B, A), 
     !. // Clause #1.

father(A, B, -0.07336957795551384) :- 
     male(B), 
     !. // Clause #2.

father(A, B, -0.14425275664768974) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_father(a, b, 0.2221919789288626) :-  /* #pos=5 */ 
   male(b),
   childof(b, a),
   !. // Flattened version of clause #1.

flattened_father(underscore, a, -0.07336957795551384) :-  /* #neg=7 */ 
   male(a),
   !. // Flattened version of clause #2.

flattened_father(underscore, underscore, -0.14425275664768974) :-  /* #neg=6 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   male(b)
%   childof(b, a)
%   male(a)

% Saving model in: Father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 8 trees is 549 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.021244706988212493
Set score:0.0025
% Only 18 out of 18 converged.
% Kept 5 of the 5 positive examples.
% Kept 7 of the 21 negative examples.
% Dataset size: 12
Computing probabilities
prob time:2 milliseconds
No hidden examples for : father
Time to build dataset: 2 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.022301785977058373
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 6 positive seeds: 1 2 3 6 8 11
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 12.0/12.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 12.0/12.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 12.0/12.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.231976 (regressionFit = 0.231975, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 8.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.231976): father(A, _) :- male(A).  [covers 8.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.157707 (regressionFit = 0.157706, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 8.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.157707): father(_, A) :- male(A).  [covers 8.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.178719 (regressionFit = 0.178718, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 6.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.267617 (regressionFit = 0.267615, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 6.0/12.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 8.0/12.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 8.0/12.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(_, A) :- male(A).  [covers 8.0/12.0 pos, 0.0/0.0 neg]
Comparing variance: 0.015218992778435348 to score=0.0025 #egs=8.0
Comparing variance: 0.008988396000314479 to score=0.0025 #egs=4.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 8.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.015219)
%         ILP node to extend: father(_, A) :- male(A).  [covers 8.0/12.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0.015219) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 4.0 < 2.1 * minPosCov = 6.3

% Time for loop #1: 4 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(_, A) :- male(A).  [covers 8.0/12.0 pos, 0.0/0.0 neg]
% This clause covers 8 positive examples, of which 8 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'father(_, A) :- male(A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]'
%     Score = -0.157707 (regressionFit = 0.157706, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Have these 7 positive seeds: 0 1 2 4 5 6 7
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'father(_, A) :- male(A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-0.1577066462287407
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 6.0/8.0 pos, 0.0/0.0 neg]
%     Score = -0.000115 (regressionFit = 0.000113, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5.0/8.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000115): father(A, B) :- male(B), childof(B, A).  [covers 5.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(A, B).  [covers 1.0/8.0 pos, 0.0/0.0 neg]
%     Score = -0.115057 (regressionFit = 0.115055, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 4.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(B, A).  [covers 1.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  father(_, A) :- male(A), siblingof(A, _).  [covers 1.0/8.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/8.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/8.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.015.
% Will extend: father(A, B) :- male(B), childof(B, A).  [covers 5.0/8.0 pos, 0.0/0.0 neg]
Comparing variance: 2.2508384855607356E-5 to score=0.0025 #egs=5.0
Comparing variance: -5.782411586589357E-19 to score=0.0025 #egs=3.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 5.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 3.0 < 2.1 * minPosCov = 6.3

% Time for loop #2: 5 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      father(A, B) :- male(B), childof(B, A).  [covers 5.0/8.0 pos, 0.0/0.0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #9 @ 12:29:20 4/20/17.  [Using 1,579,744 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( male(B) )
%   then if ( childof(B, A) )
%   | then return 0.18616949097499574;  // std dev = 0.011, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06853493935234631;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.11236798078596133;  // std dev = 0.190, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


% Clauses:

father(A, B, 0.18616949097499574) :- 
     male(B), 
     childof(B, A), 
     !. // Clause #1.

father(A, B, -0.06853493935234631) :- 
     male(B), 
     !. // Clause #2.

father(A, B, -0.11236798078596133) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_father(a, b, 0.18616949097499574) :-  /* #pos=5 */ 
   male(b),
   childof(b, a),
   !. // Flattened version of clause #1.

flattened_father(underscore, a, -0.06853493935234631) :-  /* #neg=3 */ 
   male(a),
   !. // Flattened version of clause #2.

flattened_father(underscore, underscore, -0.11236798078596133) :-  /* #neg=4 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   male(b)
%   childof(b, a)
%   male(a)

% Saving model in: Father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 9 trees is 616 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.015218992778435348
Set score:0.0025
% Only 12 out of 12 converged.
% Kept 5 of the 5 positive examples.
% Kept 12 of the 21 negative examples.
% Dataset size: 17
Computing probabilities
prob time:3 milliseconds
No hidden examples for : father
Time to build dataset: 3 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.01692049562620304
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 6 positive seeds: 0 1 2 8 10 13
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 17.0/17.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 17.0/17.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 17.0/17.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.281253 (regressionFit = 0.281252, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 13.0/17.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.281253): father(A, _) :- male(A).  [covers 13.0/17.0 pos, 0.0/0.0 neg]
%     Score = -0.194389 (regressionFit = 0.194387, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.194389): father(_, A) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]
%     Score = -0.244224 (regressionFit = 0.244223, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 7.0/17.0 pos, 0.0/0.0 neg]
%     Score = -0.246615 (regressionFit = 0.246614, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 6.0/17.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(_, A) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]
Comparing variance: 0.012190168942544854 to score=0.0025 #egs=12.0
Comparing variance: 0.009621090069461736 to score=0.0025 #egs=5.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 12.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.012190)
%         ILP node to extend: father(_, A) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0.012190) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #1: 4 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(_, A) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]
% This clause covers 12 positive examples, of which 12 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'father(_, A) :- male(A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]'
%     Score = -0.194389 (regressionFit = 0.194387, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]

% Have these 7 positive seeds: 2 3 4 6 7 8 10
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'father(_, A) :- male(A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]' score=-0.1943885976578469
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.144716 (regressionFit = 0.144714, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.144716): father(A, B) :- male(B), male(A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.000090 (regressionFit = 0.000088, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000090): father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.133256 (regressionFit = 0.133254, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 5.0/12.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.012.
% Will extend: father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
Comparing variance: 1.765059653828227E-5 to score=0.0025 #egs=5.0
Comparing variance: -9.912705577010326E-19 to score=0.0025 #egs=7.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 5.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #2: 4 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #10 @ 12:29:20 4/20/17.  [Using 1,582,536 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( male(B) )
%   then if ( childof(B, A) )
%   | then return 0.15959587391203595;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06428708606827936;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.13355692649604128;  // std dev = 0.219, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


% Clauses:

father(A, B, 0.15959587391203595) :- 
     male(B), 
     childof(B, A), 
     !. // Clause #1.

father(A, B, -0.06428708606827936) :- 
     male(B), 
     !. // Clause #2.

father(A, B, -0.13355692649604128) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_father(a, b, 0.15959587391203595) :-  /* #pos=5 */ 
   male(b),
   childof(b, a),
   !. // Flattened version of clause #1.

flattened_father(underscore, a, -0.06428708606827936) :-  /* #neg=7 */ 
   male(a),
   !. // Flattened version of clause #2.

flattened_father(underscore, underscore, -0.13355692649604128) :-  /* #neg=5 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   male(b)
%   childof(b, a)
%   male(a)

% Saving model in: Father/train/models/bRDNs/father.model.ckpt
% Saving model in: Father/train/models/bRDNs/father.model
% Time taken to learn 10 trees is 704 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.012190168942544854
Set score:0.0025
% Only 17 out of 17 converged.
% Kept 5 of the 5 positive examples.
% Kept 7 of the 21 negative examples.
% Dataset size: 12
Computing probabilities
prob time:1 milliseconds
No hidden examples for : father
Time to build dataset: 2 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.014345428130235252
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 7 positive seeds: 1 3 5 6 7 9 10
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 12.0/12.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 12.0/12.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 12.0/12.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -0.172046 (regressionFit = 0.172044, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.172046): father(A, _) :- male(A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.113335 (regressionFit = 0.113334, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.113335): father(_, A) :- male(A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.119562 (regressionFit = 0.119561, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 6.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 1.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.161353 (regressionFit = 0.161352, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 6.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 1.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 1.0/12.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(_, A) :- male(A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
Comparing variance: 0.009870839891041249 to score=0.0025 #egs=9.0
Comparing variance: 0.008165601393365968 to score=0.0025 #egs=3.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 9.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.009871)
%         ILP node to extend: father(_, A) :- male(A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0.009871) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 3.0 < 2.1 * minPosCov = 6.3

% Time for loop #1: 4 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(_, A) :- male(A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
% This clause covers 9 positive examples, of which 9 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'father(_, A) :- male(A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]'
%     Score = -0.113335 (regressionFit = 0.113334, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% Have these 7 positive seeds: 0 1 2 3 4 5 6
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'father(_, A) :- male(A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]' score=-0.11333548319946914
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.079549 (regressionFit = 0.079547, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 6.0/9.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.079549): father(A, B) :- male(B), male(A).  [covers 6.0/9.0 pos, 0.0/0.0 neg]
%     Score = -0.000073 (regressionFit = 0.000071, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5.0/9.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000073): father(A, B) :- male(B), childof(B, A).  [covers 5.0/9.0 pos, 0.0/0.0 neg]
%     Score = -0.088282 (regressionFit = 0.088280, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 5.0/9.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/9.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/9.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.010.
% Will extend: father(A, B) :- male(B), childof(B, A).  [covers 5.0/9.0 pos, 0.0/0.0 neg]
Comparing variance: 1.4117175594874353E-5 to score=0.0025 #egs=5.0
Comparing variance: 0.0 to score=0.0025 #egs=4.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 5.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 4.0 < 2.1 * minPosCov = 6.3

% Time for loop #2: 3 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      father(A, B) :- male(B), childof(B, A).  [covers 5.0/9.0 pos, 0.0/0.0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree Combined @ 12:29:20 4/20/17.  [Using 1,589,024 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( male(B) )
%   then if ( childof(B, A) )
%   | then return 0.1393362238574521;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06052657386545729;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.11116457184482802;  // std dev = 0.157, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


% Clauses:

father(A, B, 0.1393362238574521) :- 
     male(B), 
     childof(B, A), 
     !. // Clause #1.

father(A, B, -0.06052657386545729) :- 
     male(B), 
     !. // Clause #2.

father(A, B, -0.11116457184482802) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_father(a, b, 0.1393362238574521) :-  /* #pos=5 */ 
   male(b),
   childof(b, a),
   !. // Flattened version of clause #1.

flattened_father(underscore, a, -0.06052657386545729) :-  /* #neg=4 */ 
   male(a),
   !. // Flattened version of clause #2.

flattened_father(underscore, underscore, -0.11116457184482802) :-  /* #neg=3 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   male(b)
%   childof(b, a)
%   male(a)

% Saving model in: Father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 11 trees is 763 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.009870839891041249
Set score:0.002467709972760312
% Only 12 out of 12 converged.
% Kept 5 of the 5 positive examples.
% Kept 9 of the 21 negative examples.
% Dataset size: 14
Computing probabilities
prob time:0 seconds
No hidden examples for : father
Time to build dataset: 1 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.010259842288879006
Set score:0.002467709972760312
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 7 positive seeds: 0 2 5 6 8 9 10
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 14.0/14.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 14.0/14.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 14.0/14.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.132216 (regressionFit = 0.132215, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 10.0/14.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.132216): father(A, _) :- male(A).  [covers 10.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.108471 (regressionFit = 0.108470, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 11.0/14.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.108471): father(_, A) :- male(A).  [covers 11.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.093714 (regressionFit = 0.093713, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 6.0/14.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.093714): father(A, B) :- childof(B, A).  [covers 6.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.143070 (regressionFit = 0.143069, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 6.0/14.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 6.0/14.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 6.0/14.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(A, B) :- childof(B, A).  [covers 6.0/14.0 pos, 0.0/0.0 neg]
Comparing variance: 0.015546189791519392 to score=0.002467709972760312 #egs=6.0
Comparing variance: 5.444415449958311E-5 to score=0.002467709972760312 #egs=8.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 6.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because good enough fit since score < 0.002467709972760312

% Time for loop #1: 3 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(A, B) :- childof(B, A).  [covers 6.0/14.0 pos, 0.0/0.0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #12 @ 12:29:20 4/20/17.  [Using 1,587,608 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( childof(B, A) )
%   then return 0.06770912165731625;  // std dev = 0.305, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.05296186705689226;  // std dev = 0.021, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */


% Clauses:

father(A, B, 0.06770912165731625) :- 
     childof(B, A), 
     !. // Clause #1.

father(A, B, -0.05296186705689226) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_father(a, b, 0.06770912165731625) :-  /* #neg=1 #pos=5 */ 
   childof(b, a),
   !. // Flattened version of clause #1.

flattened_father(underscore, underscore, -0.05296186705689226) :-  /* #neg=8 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   childof(b, a)

% Saving model in: Father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 12 trees is 819 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.010259842288879006
Set score:0.002467709972760312
% Only 14 out of 14 converged.
% Kept 5 of the 5 positive examples.
% Kept 9 of the 21 negative examples.
% Dataset size: 14
Computing probabilities
prob time:0 seconds
No hidden examples for : father
Time to build dataset: 0 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.009417360472276108
Set score:0.002354340118069027
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 6 positive seeds: 1 2 7 8 10 11
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 14.0/14.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 14.0/14.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 14.0/14.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -0.124658 (regressionFit = 0.124657, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 11.0/14.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.124658): father(A, _) :- male(A).  [covers 11.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.095268 (regressionFit = 0.095267, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 10.0/14.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.095268): father(_, A) :- male(A).  [covers 10.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.090156 (regressionFit = 0.090155, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 6.0/14.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.090156): father(A, B) :- childof(B, A).  [covers 6.0/14.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 2.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.125667 (regressionFit = 0.125666, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7.0/14.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 2.0/14.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 2.0/14.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 6.0/14.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 6.0/14.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(A, B) :- childof(B, A).  [covers 6.0/14.0 pos, 0.0/0.0 neg]
Comparing variance: 0.014950062982176646 to score=0.002354340118069027 #egs=6.0
Comparing variance: 5.681333506803903E-5 to score=0.002354340118069027 #egs=8.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 6.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because good enough fit since score < 0.002354340118069027

% Time for loop #1: 3 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(A, B) :- childof(B, A).  [covers 6.0/14.0 pos, 0.0/0.0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #13 @ 12:29:20 4/20/17.  [Using 1,598,656 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( childof(B, A) )
%   then return 0.06164588825297674;  // std dev = 0.300, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.048622181745366665;  // std dev = 0.021, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */


% Clauses:

father(A, B, 0.06164588825297674) :- 
     childof(B, A), 
     !. // Clause #1.

father(A, B, -0.048622181745366665) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_father(a, b, 0.06164588825297674) :-  /* #neg=1 #pos=5 */ 
   childof(b, a),
   !. // Flattened version of clause #1.

flattened_father(underscore, underscore, -0.048622181745366665) :-  /* #neg=8 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   childof(b, a)

% Saving model in: Father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 13 trees is 882 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.009417360472276108
Set score:0.002354340118069027
% Only 14 out of 14 converged.
% Kept 5 of the 5 positive examples.
% Kept 12 of the 21 negative examples.
% Dataset size: 17
Computing probabilities
prob time:1 milliseconds
No hidden examples for : father
Time to build dataset: 1 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.013198301085723594
Set score:0.002354340118069027
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 7 positive seeds: 0 3 4 8 9 14 15
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 17.0/17.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 17.0/17.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 17.0/17.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.205729 (regressionFit = 0.205728, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 11.0/17.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.205729): father(A, _) :- male(A).  [covers 11.0/17.0 pos, 0.0/0.0 neg]
%     Score = -0.129920 (regressionFit = 0.129919, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 11.0/17.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.129920): father(_, A) :- male(A).  [covers 11.0/17.0 pos, 0.0/0.0 neg]
%     Score = -0.221004 (regressionFit = 0.221003, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 8.0/17.0 pos, 0.0/0.0 neg]
%     Score = -0.215502 (regressionFit = 0.215501, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 6.0/17.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 11.0/17.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 11.0/17.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(_, A) :- male(A).  [covers 11.0/17.0 pos, 0.0/0.0 neg]
Comparing variance: 0.0065161201523379455 to score=0.002354340118069027 #egs=11.0
Comparing variance: 0.009706956547953493 to score=0.002354340118069027 #egs=6.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 11.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.006516)
%         ILP node to extend: father(_, A) :- male(A).  [covers 11.0/17.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0.006516) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 6.0 < 2.1 * minPosCov = 6.3

% Time for loop #1: 3 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(_, A) :- male(A).  [covers 11.0/17.0 pos, 0.0/0.0 neg]
% This clause covers 11 positive examples, of which 11 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'father(_, A) :- male(A).  [covers 11.0/11.0 pos, 0.0/0.0 neg]'
%     Score = -0.129920 (regressionFit = 0.129919, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 11.0/11.0 pos, 0.0/0.0 neg]

% Have these 7 positive seeds: 2 4 5 6 7 8 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'father(_, A) :- male(A).  [covers 11.0/11.0 pos, 0.0/0.0 neg]' score=-0.12992018096343835
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 9.0/11.0 pos, 0.0/0.0 neg]
%     Score = -0.000049 (regressionFit = 0.000047, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5.0/11.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000049): father(A, B) :- male(B), childof(B, A).  [covers 5.0/11.0 pos, 0.0/0.0 neg]
%     Score = -0.067215 (regressionFit = 0.067213, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 5.0/11.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/11.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/11.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.007.
% Will extend: father(A, B) :- male(B), childof(B, A).  [covers 5.0/11.0 pos, 0.0/0.0 neg]
Comparing variance: 9.433668057343136E-6 to score=0.002354340118069027 #egs=5.0
Comparing variance: 5.782411586589357E-19 to score=0.002354340118069027 #egs=6.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 5.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 6.0 < 2.1 * minPosCov = 6.3

% Time for loop #2: 3 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      father(A, B) :- male(B), childof(B, A).  [covers 5.0/11.0 pos, 0.0/0.0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #14 @ 12:29:20 4/20/17.  [Using 1,602,560 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( male(B) )
%   then if ( childof(B, A) )
%   | then return 0.11012385729661263;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.05193906121445387;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.13425025112309943;  // std dev = 0.241, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */


% Clauses:

father(A, B, 0.11012385729661263) :- 
     male(B), 
     childof(B, A), 
     !. // Clause #1.

father(A, B, -0.05193906121445387) :- 
     male(B), 
     !. // Clause #2.

father(A, B, -0.13425025112309943) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_father(a, b, 0.11012385729661263) :-  /* #pos=5 */ 
   male(b),
   childof(b, a),
   !. // Flattened version of clause #1.

flattened_father(underscore, a, -0.05193906121445387) :-  /* #neg=6 */ 
   male(a),
   !. // Flattened version of clause #2.

flattened_father(underscore, underscore, -0.13425025112309943) :-  /* #neg=6 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   male(b)
%   childof(b, a)
%   male(a)

% Saving model in: Father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 14 trees is 944 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0065161201523379455
Set score:0.0016290300380844864
% Only 17 out of 17 converged.
% Kept 5 of the 5 positive examples.
% Kept 12 of the 21 negative examples.
% Dataset size: 17
Computing probabilities
prob time:1 milliseconds
No hidden examples for : father
Time to build dataset: 1 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.008969705826008176
Set score:0.0016290300380844864
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 6 positive seeds: 0 8 9 10 14 15
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 17.0/17.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 17.0/17.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 17.0/17.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.148194 (regressionFit = 0.148193, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.148194): father(A, _) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]
%     Score = -0.103014 (regressionFit = 0.103013, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 10.0/17.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.103014): father(_, A) :- male(A).  [covers 10.0/17.0 pos, 0.0/0.0 neg]
%     Score = -0.141779 (regressionFit = 0.141778, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 7.0/17.0 pos, 0.0/0.0 neg]
%     Score = -0.147842 (regressionFit = 0.147841, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 6.0/17.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 10.0/17.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 10.0/17.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(_, A) :- male(A).  [covers 10.0/17.0 pos, 0.0/0.0 neg]
Comparing variance: 0.0055711769661224 to score=0.0016290300380844864 #egs=10.0
Comparing variance: 0.006757328125105233 to score=0.0016290300380844864 #egs=7.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 10.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.005571)
%         ILP node to extend: father(_, A) :- male(A).  [covers 10.0/17.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0.005571) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 7.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.006757)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0.006757) into position #1 in the search queue (new size=2).

% Time for loop #1: 2 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(_, A) :- male(A).  [covers 10.0/17.0 pos, 0.0/0.0 neg]
% This clause covers 10 positive examples, of which 10 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 7 positive seeds: 0 1 2 3 4 5 6
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 7.0/7.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 7.0/7.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'father(_, _).  [covers 7.0/7.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -0.047121 (regressionFit = 0.047120, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 4.0/7.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.047121): father(A, _) :- male(A).  [covers 4.0/7.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 2.0/7.0 pos, 0.0/0.0 neg]
%     Score = -0.046948 (regressionFit = 0.046947, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 3.0/7.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.046948): father(A, _) :- siblingof(A, _).  [covers 3.0/7.0 pos, 0.0/0.0 neg]

% The best node found: father(A, _) :- siblingof(A, _).  [covers 3.0/7.0 pos, 0.0/0.0 neg]

% The best node found: father(A, _) :- siblingof(A, _).  [covers 3.0/7.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.007.
% Will extend: father(A, _) :- siblingof(A, _).  [covers 3.0/7.0 pos, 0.0/0.0 neg]
Comparing variance: 0.006908229835944305 to score=0.0016290300380844864 #egs=3.0
Comparing variance: 0.00655562514341515 to score=0.0016290300380844864 #egs=4.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 3.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 4.0 < 2.1 * minPosCov = 6.3

% Time for loop #2: 2 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      father(A, _) :- siblingof(A, _).  [covers 3.0/7.0 pos, 0.0/0.0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'father(_, A) :- male(A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]'
%     Score = -0.103014 (regressionFit = 0.103013, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]

% Have these 6 positive seeds: 0 1 2 6 8 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #3, bodyLen=1] 'father(_, A) :- male(A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-0.10301418653696062
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 8.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000042 (regressionFit = 0.000040, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5.0/10.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000042): father(A, B) :- male(B), childof(B, A).  [covers 5.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.033302 (regressionFit = 0.033300, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 3.0/10.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/10.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/10.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.006.
% Will extend: father(A, B) :- male(B), childof(B, A).  [covers 5.0/10.0 pos, 0.0/0.0 neg]
Comparing variance: 7.928796726767994E-6 to score=0.0016290300380844864 #egs=5.0
Comparing variance: 3.4694469519536144E-19 to score=0.0016290300380844864 #egs=5.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 5.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #3: 3 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      father(A, B) :- male(B), childof(B, A).  [covers 5.0/10.0 pos, 0.0/0.0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #15 @ 12:29:20 4/20/17.  [Using 1,616,544 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( male(B) )
%   then if ( childof(B, A) )
%   | then return 0.09978728806335155;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.04944022371325105;  // std dev = 1.32e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( siblingof(A, C) )
%   | then return -0.09265038293564554;  // std dev = 0.144, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.07827810765850796;  // std dev = 0.162, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


% Clauses:

father(A, B, 0.09978728806335155) :- 
     male(B), 
     childof(B, A), 
     !. // Clause #1.

father(A, B, -0.04944022371325105) :- 
     male(B), 
     !. // Clause #2.

father(A, B, -0.09265038293564554) :- 
     siblingof(A, C), 
     !. // Clause #3.

father(A, B, -0.07827810765850796) :- !. // Clause #4.


% The flattened versions of these clauses:

flattened_father(a, b, 0.09978728806335155) :-  /* #pos=5 */ 
   male(b),
   childof(b, a),
   !. // Flattened version of clause #1.

flattened_father(underscore, a, -0.04944022371325105) :-  /* #neg=5 */ 
   male(a),
   !. // Flattened version of clause #2.

flattened_father(a, underscore, -0.09265038293564554) :-  /* #neg=3 */ 
   siblingof(a, underscore),
   !. // Flattened version of clause #3.

flattened_father(underscore, underscore, -0.07827810765850796) :-  /* #neg=4 */ 
   !. // Flattened version of clause #4.


% The unique flattened literals:
%   siblingof(a, underscore)
%   male(b)
%   childof(b, a)
%   male(a)

% Saving model in: Father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 15 trees is 1.014 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0055711769661224
Set score:0.0013927942415306
% Only 17 out of 17 converged.
% Kept 5 of the 5 positive examples.
% Kept 6 of the 21 negative examples.
% Dataset size: 11
Computing probabilities
prob time:1 milliseconds
No hidden examples for : father
Time to build dataset: 1 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.004420865475898456
Set score:0.001105216368974614
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 6 positive seeds: 1 2 3 5 9 10
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 11.0/11.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 11.0/11.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 11.0/11.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 10.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 9.0/11.0 pos, 0.0/0.0 neg]
%     Score = -0.000375 (regressionFit = 0.000374, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 5.0/11.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000375): father(A, B) :- childof(B, A).  [covers 5.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -0.045257 (regressionFit = 0.045256, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 5.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 1.0/11.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 5.0/11.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 5.0/11.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(A, B) :- childof(B, A).  [covers 5.0/11.0 pos, 0.0/0.0 neg]
Comparing variance: 6.747926673812687E-6 to score=0.001105216368974614 #egs=5.0
Comparing variance: 5.674119924652775E-5 to score=0.001105216368974614 #egs=6.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 5.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 6.0 < 2.1 * minPosCov = 6.3

% Time for loop #1: 3 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(A, B) :- childof(B, A).  [covers 5.0/11.0 pos, 0.0/0.0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #16 @ 12:29:20 4/20/17.  [Using 1,614,544 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( childof(B, A) )
%   then return 0.09117522491587086;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.04184215082459177;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */


% Clauses:

father(A, B, 0.09117522491587086) :- 
     childof(B, A), 
     !. // Clause #1.

father(A, B, -0.04184215082459177) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_father(a, b, 0.09117522491587086) :-  /* #pos=5 */ 
   childof(b, a),
   !. // Flattened version of clause #1.

flattened_father(underscore, underscore, -0.04184215082459177) :-  /* #neg=6 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   childof(b, a)

% Saving model in: Father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 16 trees is 1.071 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.004420865475898456
Set score:0.001105216368974614
% Only 11 out of 11 converged.
% Kept 5 of the 5 positive examples.
% Kept 13 of the 21 negative examples.
% Dataset size: 18
Computing probabilities
prob time:1 milliseconds
No hidden examples for : father
Time to build dataset: 1 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.009141113663788334
Set score:0.001105216368974614
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 7 positive seeds: 2 3 6 7 14 15 16
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 18.0/18.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 18.0/18.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 18.0/18.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -0.151563 (regressionFit = 0.151562, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 11.0/18.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.151563): father(A, _) :- male(A).  [covers 11.0/18.0 pos, 0.0/0.0 neg]
%     Score = -0.099028 (regressionFit = 0.099027, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 12.0/18.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.099028): father(_, A) :- male(A).  [covers 12.0/18.0 pos, 0.0/0.0 neg]
%     Score = -0.163729 (regressionFit = 0.163728, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 8.0/18.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 1.0/18.0 pos, 0.0/0.0 neg]
%     Score = -0.158914 (regressionFit = 0.158912, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 6.0/18.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 1.0/18.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 1.0/18.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 12.0/18.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 12.0/18.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(_, A) :- male(A).  [covers 12.0/18.0 pos, 0.0/0.0 neg]
Comparing variance: 0.0040608940751709925 to score=0.001105216368974614 #egs=12.0
Comparing variance: 0.008382703466055358 to score=0.001105216368974614 #egs=6.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 12.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.004061)
%         ILP node to extend: father(_, A) :- male(A).  [covers 12.0/18.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0.004061) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 6.0 < 2.1 * minPosCov = 6.3

% Time for loop #1: 4 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(_, A) :- male(A).  [covers 12.0/18.0 pos, 0.0/0.0 neg]
% This clause covers 12 positive examples, of which 12 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'father(_, A) :- male(A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]'
%     Score = -0.099028 (regressionFit = 0.099027, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]

% Have these 7 positive seeds: 0 1 2 3 5 6 7
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'father(_, A) :- male(A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]' score=-0.09902806969838404
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.048211 (regressionFit = 0.048209, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.048211): father(A, B) :- male(B), male(A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.000031 (regressionFit = 0.000029, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000031): father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.044390 (regressionFit = 0.044388, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 5.0/12.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.004.
% Will extend: father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
Comparing variance: 5.806506246544552E-6 to score=0.001105216368974614 #egs=5.0
Comparing variance: -7.434529182757744E-19 to score=0.001105216368974614 #egs=7.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 5.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because good enough fit since score < 0.001105216368974614

% Time for loop #2: 3 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #17 @ 12:29:20 4/20/17.  [Using 1,618,696 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( male(B) )
%   then if ( childof(B, A) )
%   | then return 0.08389713615126423;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.04532253909207923;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.11945863884257633;  // std dev = 0.224, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */


% Clauses:

father(A, B, 0.08389713615126423) :- 
     male(B), 
     childof(B, A), 
     !. // Clause #1.

father(A, B, -0.04532253909207923) :- 
     male(B), 
     !. // Clause #2.

father(A, B, -0.11945863884257633) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_father(a, b, 0.08389713615126423) :-  /* #pos=5 */ 
   male(b),
   childof(b, a),
   !. // Flattened version of clause #1.

flattened_father(underscore, a, -0.04532253909207923) :-  /* #neg=7 */ 
   male(a),
   !. // Flattened version of clause #2.

flattened_father(underscore, underscore, -0.11945863884257633) :-  /* #neg=6 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   male(b)
%   childof(b, a)
%   male(a)

% Saving model in: Father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 17 trees is 1.148 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0040608940751709925
Set score:0.0010152235187927481
% Only 18 out of 18 converged.
% Kept 5 of the 5 positive examples.
% Kept 10 of the 21 negative examples.
% Dataset size: 15
Computing probabilities
prob time:1 milliseconds
No hidden examples for : father
Time to build dataset: 1 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0030150981535420488
Set score:7.537745383855122E-4
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 7 positive seeds: 2 3 5 6 8 9 10
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 15.0/15.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 15.0/15.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 15.0/15.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.044060 (regressionFit = 0.044059, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 10.0/15.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.044060): father(A, _) :- male(A).  [covers 10.0/15.0 pos, 0.0/0.0 neg]
%     Score = -0.042784 (regressionFit = 0.042783, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 12.0/15.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.042784): father(_, A) :- male(A).  [covers 12.0/15.0 pos, 0.0/0.0 neg]
%     Score = -0.000752 (regressionFit = 0.000751, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 5.0/15.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000752): father(A, B) :- childof(B, A).  [covers 5.0/15.0 pos, 0.0/0.0 neg]
%     Score = -0.041852 (regressionFit = 0.041850, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 6.0/15.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 5.0/15.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 5.0/15.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(A, B) :- childof(B, A).  [covers 5.0/15.0 pos, 0.0/0.0 neg]
Comparing variance: 5.045224036196589E-6 to score=7.537745383855122E-4 #egs=5.0
Comparing variance: 7.255548859910199E-5 to score=7.537745383855122E-4 #egs=10.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 5.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because good enough fit since score < 7.537745383855122E-4

% Time for loop #1: 2 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(A, B) :- childof(B, A).  [covers 5.0/15.0 pos, 0.0/0.0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #18 @ 12:29:20 4/20/17.  [Using 1,619,536 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( childof(B, A) )
%   then return 0.0776704157589156;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.03784022179922282;  // std dev = 0.027, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */


% Clauses:

father(A, B, 0.0776704157589156) :- 
     childof(B, A), 
     !. // Clause #1.

father(A, B, -0.03784022179922282) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_father(a, b, 0.0776704157589156) :-  /* #pos=5 */ 
   childof(b, a),
   !. // Flattened version of clause #1.

flattened_father(underscore, underscore, -0.03784022179922282) :-  /* #neg=10 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   childof(b, a)

% Saving model in: Father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 18 trees is 1.205 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0030150981535420488
Set score:7.537745383855122E-4
% Only 15 out of 15 converged.
% Kept 5 of the 5 positive examples.
% Kept 12 of the 21 negative examples.
% Dataset size: 17
Computing probabilities
prob time:0 seconds
No hidden examples for : father
Time to build dataset: 1 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.006471475486996924
Set score:7.537745383855122E-4
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 7 positive seeds: 1 2 4 5 6 7 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 17.0/17.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 17.0/17.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 17.0/17.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.086683 (regressionFit = 0.086682, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 10.0/17.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.086683): father(A, _) :- male(A).  [covers 10.0/17.0 pos, 0.0/0.0 neg]
%     Score = -0.074518 (regressionFit = 0.074517, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.074518): father(_, A) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]
%     Score = -0.105934 (regressionFit = 0.105933, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 7.0/17.0 pos, 0.0/0.0 neg]
%     Score = -0.108961 (regressionFit = 0.108960, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7.0/17.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(_, A) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]
Comparing variance: 0.003168534519136674 to score=7.537745383855122E-4 #egs=12.0
Comparing variance: 0.007298931107696925 to score=7.537745383855122E-4 #egs=5.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 12.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.003169)
%         ILP node to extend: father(_, A) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0.003169) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #1: 2 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(_, A) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]
% This clause covers 12 positive examples, of which 12 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'father(_, A) :- male(A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]'
%     Score = -0.074518 (regressionFit = 0.074517, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]

% Have these 7 positive seeds: 0 1 3 4 5 8 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'father(_, A) :- male(A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]' score=-0.07451818976812472
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.035754 (regressionFit = 0.035752, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 8.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.035754): father(A, B) :- male(B), male(A).  [covers 8.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.000024 (regressionFit = 0.000022, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000024): father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.034632 (regressionFit = 0.034629, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 5.0/12.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.003.
% Will extend: father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
Comparing variance: 4.421699998347073E-6 to score=7.537745383855122E-4 #egs=5.0
Comparing variance: 2.4781763942525814E-19 to score=7.537745383855122E-4 #egs=7.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 5.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because good enough fit since score < 7.537745383855122E-4

% Time for loop #2: 2 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #19 @ 12:29:20 4/20/17.  [Using 1,627,144 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( male(B) )
%   then if ( childof(B, A) )
%   | then return 0.07228598056555402;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.041857246347676146;  // std dev = 1.32e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.09458600496276949;  // std dev = 0.191, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


% Clauses:

father(A, B, 0.07228598056555402) :- 
     male(B), 
     childof(B, A), 
     !. // Clause #1.

father(A, B, -0.041857246347676146) :- 
     male(B), 
     !. // Clause #2.

father(A, B, -0.09458600496276949) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_father(a, b, 0.07228598056555402) :-  /* #pos=5 */ 
   male(b),
   childof(b, a),
   !. // Flattened version of clause #1.

flattened_father(underscore, a, -0.041857246347676146) :-  /* #neg=7 */ 
   male(a),
   !. // Flattened version of clause #2.

flattened_father(underscore, underscore, -0.09458600496276949) :-  /* #neg=5 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   male(b)
%   childof(b, a)
%   male(a)

% Saving model in: Father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 19 trees is 1.274 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.003168534519136674
Set score:7.537745383855122E-4
% Only 17 out of 17 converged.
% Kept 5 of the 5 positive examples.
% Kept 9 of the 21 negative examples.
% Dataset size: 14
Computing probabilities
prob time:0 seconds
No hidden examples for : father
Time to build dataset: 1 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.004836967546451009
Set score:7.537745383855122E-4
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 7 positive seeds: 4 5 6 7 9 10 12
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 14.0/14.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 14.0/14.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 14.0/14.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -0.060237 (regressionFit = 0.060236, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 11.0/14.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.060237): father(A, _) :- male(A).  [covers 11.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.049814 (regressionFit = 0.049813, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 11.0/14.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.049814): father(_, A) :- male(A).  [covers 11.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.054974 (regressionFit = 0.054973, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 6.0/14.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 2.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.066833 (regressionFit = 0.066832, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 8.0/14.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 2.0/14.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 2.0/14.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 11.0/14.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 11.0/14.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(_, A) :- male(A).  [covers 11.0/14.0 pos, 0.0/0.0 neg]
Comparing variance: 0.002882785921713485 to score=7.537745383855122E-4 #egs=11.0
Comparing variance: 0.006034149727551494 to score=7.537745383855122E-4 #egs=3.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 11.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.002883)
%         ILP node to extend: father(_, A) :- male(A).  [covers 11.0/14.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0.002883) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 3.0 < 2.1 * minPosCov = 6.3

% Time for loop #1: 2 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(_, A) :- male(A).  [covers 11.0/14.0 pos, 0.0/0.0 neg]
% This clause covers 11 positive examples, of which 11 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'father(_, A) :- male(A).  [covers 11.0/11.0 pos, 0.0/0.0 neg]'
%     Score = -0.049814 (regressionFit = 0.049813, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 11.0/11.0 pos, 0.0/0.0 neg]

% Have these 7 positive seeds: 0 2 3 4 6 7 8
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'father(_, A) :- male(A).  [covers 11.0/11.0 pos, 0.0/0.0 neg]' score=-0.04981421432150282
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 9.0/11.0 pos, 0.0/0.0 neg]
%     Score = -0.000022 (regressionFit = 0.000020, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5.0/11.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000022): father(A, B) :- male(B), childof(B, A).  [covers 5.0/11.0 pos, 0.0/0.0 neg]
%     Score = -0.031492 (regressionFit = 0.031490, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 6.0/11.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/11.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/11.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.003.
% Will extend: father(A, B) :- male(B), childof(B, A).  [covers 5.0/11.0 pos, 0.0/0.0 neg]
Comparing variance: 3.905114697626277E-6 to score=7.537745383855122E-4 #egs=5.0
Comparing variance: 2.8912057932946783E-19 to score=7.537745383855122E-4 #egs=6.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 5.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 6.0 < 2.1 * minPosCov = 6.3

% Time for loop #2: 2 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      father(A, B) :- male(B), childof(B, A).  [covers 5.0/11.0 pos, 0.0/0.0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #20 @ 12:29:20 4/20/17.  [Using 1,631,440 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( male(B) )
%   then if ( childof(B, A) )
%   | then return 0.06758608756095401;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.04021037422683108;  // std dev = 1.32e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07836602909197538;  // std dev = 0.135, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


% Clauses:

father(A, B, 0.06758608756095401) :- 
     male(B), 
     childof(B, A), 
     !. // Clause #1.

father(A, B, -0.04021037422683108) :- 
     male(B), 
     !. // Clause #2.

father(A, B, -0.07836602909197538) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_father(a, b, 0.06758608756095401) :-  /* #pos=5 */ 
   male(b),
   childof(b, a),
   !. // Flattened version of clause #1.

flattened_father(underscore, a, -0.04021037422683108) :-  /* #neg=6 */ 
   male(a),
   !. // Flattened version of clause #2.

flattened_father(underscore, underscore, -0.07836602909197538) :-  /* #neg=3 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   male(b)
%   childof(b, a)
%   male(a)

% Saving model in: Father/train/models/bRDNs/father.model.ckpt
% Saving model in: Father/train/models/bRDNs/father.model
% Time taken to learn 20 trees is 1.384 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0028827859217134856
Set score:7.206964804283714E-4
% Only 14 out of 14 converged.
% Kept 5 of the 5 positive examples.
% Kept 8 of the 21 negative examples.
% Dataset size: 13
Computing probabilities
prob time:1 milliseconds
No hidden examples for : father
Time to build dataset: 1 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.004728834276465663
Set score:7.206964804283714E-4
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 7 positive seeds: 0 1 2 3 4 5 8
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 13.0/13.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 13.0/13.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 13.0/13.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -0.061234 (regressionFit = 0.061233, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 10.0/13.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.061234): father(A, _) :- male(A).  [covers 10.0/13.0 pos, 0.0/0.0 neg]
%     Score = -0.043620 (regressionFit = 0.043618, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 9.0/13.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.043620): father(_, A) :- male(A).  [covers 9.0/13.0 pos, 0.0/0.0 neg]
%     Score = -0.052407 (regressionFit = 0.052406, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 6.0/13.0 pos, 0.0/0.0 neg]
%     Score = -0.057474 (regressionFit = 0.057473, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 3.0/13.0 pos, 0.0/0.0 neg]
%     Score = -0.058698 (regressionFit = 0.058697, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7.0/13.0 pos, 0.0/0.0 neg]
%     Score = -0.057474 (regressionFit = 0.057473, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 3.0/13.0 pos, 0.0/0.0 neg]
%     Score = -0.057474 (regressionFit = 0.057473, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 3.0/13.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 9.0/13.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 9.0/13.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(_, A) :- male(A).  [covers 9.0/13.0 pos, 0.0/0.0 neg]
Comparing variance: 0.002577699932337569 to score=7.206964804283714E-4 #egs=9.0
Comparing variance: 0.005104777424047602 to score=7.206964804283714E-4 #egs=4.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 9.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.002578)
%         ILP node to extend: father(_, A) :- male(A).  [covers 9.0/13.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0.002578) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 4.0 < 2.1 * minPosCov = 6.3

% Time for loop #1: 2 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(_, A) :- male(A).  [covers 9.0/13.0 pos, 0.0/0.0 neg]
% This clause covers 9 positive examples, of which 9 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'father(_, A) :- male(A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]'
%     Score = -0.043620 (regressionFit = 0.043618, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% Have these 7 positive seeds: 0 1 2 3 4 5 6
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'father(_, A) :- male(A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]' score=-0.04361952908722853
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]
%     Score = -0.000019 (regressionFit = 0.000017, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5.0/9.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000019): father(A, B) :- male(B), childof(B, A).  [covers 5.0/9.0 pos, 0.0/0.0 neg]
%     Score = -0.008713 (regressionFit = 0.008711, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(A, B).  [covers 3.0/9.0 pos, 0.0/0.0 neg]
%     Score = -0.022456 (regressionFit = 0.022454, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 6.0/9.0 pos, 0.0/0.0 neg]
%     Score = -0.008713 (regressionFit = 0.008711, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(B, A).  [covers 3.0/9.0 pos, 0.0/0.0 neg]
%     Score = -0.008713 (regressionFit = 0.008711, penalties=2.2300000000000002E-6) for clause:  father(_, A) :- male(A), siblingof(A, _).  [covers 3.0/9.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/9.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/9.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.003.
% Will extend: father(A, B) :- male(B), childof(B, A).  [covers 5.0/9.0 pos, 0.0/0.0 neg]
Comparing variance: 3.472684098468348E-6 to score=7.206964804283714E-4 #egs=5.0
Comparing variance: 0.0 to score=7.206964804283714E-4 #egs=4.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 5.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 4.0 < 2.1 * minPosCov = 6.3

% Time for loop #2: 2 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      father(A, B) :- male(B), childof(B, A).  [covers 5.0/9.0 pos, 0.0/0.0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #21 @ 12:29:21 4/20/17.  [Using 1,645,536 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( male(B) )
%   then if ( childof(B, A) )
%   | then return 0.06344964496439438;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.038686887122541105;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.0622447903879185;  // std dev = 0.143, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


% Clauses:

father(A, B, 0.06344964496439438) :- 
     male(B), 
     childof(B, A), 
     !. // Clause #1.

father(A, B, -0.038686887122541105) :- 
     male(B), 
     !. // Clause #2.

father(A, B, -0.0622447903879185) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_father(a, b, 0.06344964496439438) :-  /* #pos=5 */ 
   male(b),
   childof(b, a),
   !. // Flattened version of clause #1.

flattened_father(underscore, a, -0.038686887122541105) :-  /* #neg=4 */ 
   male(a),
   !. // Flattened version of clause #2.

flattened_father(underscore, underscore, -0.0622447903879185) :-  /* #neg=4 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   male(b)
%   childof(b, a)
%   male(a)

% Saving model in: Father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 21 trees is 1.446 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0025776999323375684
Set score:6.444249830843921E-4
% Only 13 out of 13 converged.
% Kept 5 of the 5 positive examples.
% Kept 9 of the 21 negative examples.
% Dataset size: 14
Computing probabilities
prob time:1 milliseconds
No hidden examples for : father
Time to build dataset: 1 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.003789779132712546
Set score:6.444249830843921E-4
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 7 positive seeds: 0 2 4 5 6 7 8
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 14.0/14.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 14.0/14.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 14.0/14.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.047020 (regressionFit = 0.047019, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 10.0/14.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.047020): father(A, _) :- male(A).  [covers 10.0/14.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 13.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.040602 (regressionFit = 0.040601, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 6.0/14.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.040602): father(A, B) :- childof(B, A).  [covers 6.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.049846 (regressionFit = 0.049845, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7.0/14.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 6.0/14.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 6.0/14.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(A, B) :- childof(B, A).  [covers 6.0/14.0 pos, 0.0/0.0 neg]
Comparing variance: 0.006766789250271919 to score=6.444249830843921E-4 #egs=6.0
Comparing variance: -4.3368086899420177E-19 to score=6.444249830843921E-4 #egs=8.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 6.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because good enough fit since score < 6.444249830843921E-4

% Time for loop #1: 2 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(A, B) :- childof(B, A).  [covers 6.0/14.0 pos, 0.0/0.0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #22 @ 12:29:21 4/20/17.  [Using 1,638,160 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( childof(B, A) )
%   then return 0.023001275665633366;  // std dev = 0.201, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.037273514011315116;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */


% Clauses:

father(A, B, 0.023001275665633366) :- 
     childof(B, A), 
     !. // Clause #1.

father(A, B, -0.037273514011315116) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_father(a, b, 0.023001275665633366) :-  /* #neg=1 #pos=5 */ 
   childof(b, a),
   !. // Flattened version of clause #1.

flattened_father(underscore, underscore, -0.037273514011315116) :-  /* #neg=8 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   childof(b, a)

% Saving model in: Father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 22 trees is 1.511 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.003789779132712546
Set score:6.444249830843921E-4
% Only 14 out of 14 converged.
% Kept 5 of the 5 positive examples.
% Kept 12 of the 21 negative examples.
% Dataset size: 17
Computing probabilities
prob time:1 milliseconds
No hidden examples for : father
Time to build dataset: 1 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.004645585199233721
Set score:6.444249830843921E-4
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 7 positive seeds: 0 3 4 6 7 8 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 17.0/17.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 17.0/17.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 17.0/17.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.076651 (regressionFit = 0.076650, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.076651): father(A, _) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]
%     Score = -0.054275 (regressionFit = 0.054274, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.054275): father(_, A) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]
%     Score = -0.076700 (regressionFit = 0.076699, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 7.0/17.0 pos, 0.0/0.0 neg]
%     Score = -0.065039 (regressionFit = 0.065038, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 5.0/17.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(_, A) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]
Comparing variance: 0.002170011892858855 to score=6.444249830843921E-4 #egs=12.0
Comparing variance: 0.005646696781062952 to score=6.444249830843921E-4 #egs=5.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 12.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.002170)
%         ILP node to extend: father(_, A) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0.002170) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #1: 1 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(_, A) :- male(A).  [covers 12.0/17.0 pos, 0.0/0.0 neg]
% This clause covers 12 positive examples, of which 12 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'father(_, A) :- male(A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]'
%     Score = -0.054275 (regressionFit = 0.054274, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]

% Have these 7 positive seeds: 0 1 2 3 5 6 7
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'father(_, A) :- male(A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]' score=-0.05427474661962101
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.025764 (regressionFit = 0.025762, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.025764): father(A, B) :- male(B), male(A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.000017 (regressionFit = 0.000015, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000017): father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.020487 (regressionFit = 0.020484, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 4.0/12.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.002.
% Will extend: father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
Comparing variance: 2.9838892832381727E-6 to score=6.444249830843921E-4 #egs=5.0
Comparing variance: 0.0 to score=6.444249830843921E-4 #egs=7.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 5.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because good enough fit since score < 6.444249830843921E-4

% Time for loop #2: 2 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #23 @ 12:29:21 4/20/17.  [Using 1,648,440 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( male(B) )
%   then if ( childof(B, A) )
%   | then return 0.05850247016484229;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.03595881127812788;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.08025822413887045;  // std dev = 0.168, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


% Clauses:

father(A, B, 0.05850247016484229) :- 
     male(B), 
     childof(B, A), 
     !. // Clause #1.

father(A, B, -0.03595881127812788) :- 
     male(B), 
     !. // Clause #2.

father(A, B, -0.08025822413887045) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_father(a, b, 0.05850247016484229) :-  /* #pos=5 */ 
   male(b),
   childof(b, a),
   !. // Flattened version of clause #1.

flattened_father(underscore, a, -0.03595881127812788) :-  /* #neg=7 */ 
   male(a),
   !. // Flattened version of clause #2.

flattened_father(underscore, underscore, -0.08025822413887045) :-  /* #neg=5 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   male(b)
%   childof(b, a)
%   male(a)

% Saving model in: Father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 23 trees is 1.574 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.002170011892858855
Set score:5.425029732147137E-4
% Only 17 out of 17 converged.
% Kept 5 of the 5 positive examples.
% Kept 13 of the 21 negative examples.
% Dataset size: 18
Computing probabilities
prob time:1 milliseconds
No hidden examples for : father
Time to build dataset: 1 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.003737567038697657
Set score:5.425029732147137E-4
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 7 positive seeds: 0 1 3 5 6 9 12
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 18.0/18.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 18.0/18.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 18.0/18.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.054257 (regressionFit = 0.054256, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 12.0/18.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.054257): father(A, _) :- male(A).  [covers 12.0/18.0 pos, 0.0/0.0 neg]
%     Score = -0.049421 (regressionFit = 0.049420, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 12.0/18.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.049421): father(_, A) :- male(A).  [covers 12.0/18.0 pos, 0.0/0.0 neg]
%     Score = -0.064944 (regressionFit = 0.064943, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 7.0/18.0 pos, 0.0/0.0 neg]
%     Score = -0.066972 (regressionFit = 0.066971, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 9.0/18.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 12.0/18.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 12.0/18.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(_, A) :- male(A).  [covers 12.0/18.0 pos, 0.0/0.0 neg]
Comparing variance: 0.001974037482521922 to score=5.425029732147137E-4 #egs=12.0
Comparing variance: 0.0042886034800935354 to score=5.425029732147137E-4 #egs=6.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 12.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.001974)
%         ILP node to extend: father(_, A) :- male(A).  [covers 12.0/18.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0.001974) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 6.0 < 2.1 * minPosCov = 6.3

% Time for loop #1: 2 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(_, A) :- male(A).  [covers 12.0/18.0 pos, 0.0/0.0 neg]
% This clause covers 12 positive examples, of which 12 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'father(_, A) :- male(A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]'
%     Score = -0.049421 (regressionFit = 0.049420, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]

% Have these 7 positive seeds: 0 3 4 5 7 8 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'father(_, A) :- male(A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]' score=-0.049421190670824275
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.023437 (regressionFit = 0.023435, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.023437): father(A, B) :- male(B), male(A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.000015 (regressionFit = 0.000013, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000015): father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.023129 (regressionFit = 0.023127, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 6.0/12.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.002.
% Will extend: father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
Comparing variance: 2.690219050204695E-6 to score=5.425029732147137E-4 #egs=5.0
Comparing variance: -2.4781763942525814E-19 to score=5.425029732147137E-4 #egs=7.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 5.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because good enough fit since score < 5.425029732147137E-4

% Time for loop #2: 2 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      father(A, B) :- male(B), childof(B, A).  [covers 5.0/12.0 pos, 0.0/0.0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #24 @ 12:29:21 4/20/17.  [Using 1,654,840 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( male(B) )
%   then if ( childof(B, A) )
%   | then return 0.055362325290497075;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.03473285998440214;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06400662629565888;  // std dev = 0.160, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */


% Clauses:

father(A, B, 0.055362325290497075) :- 
     male(B), 
     childof(B, A), 
     !. // Clause #1.

father(A, B, -0.03473285998440214) :- 
     male(B), 
     !. // Clause #2.

father(A, B, -0.06400662629565888) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_father(a, b, 0.055362325290497075) :-  /* #pos=5 */ 
   male(b),
   childof(b, a),
   !. // Flattened version of clause #1.

flattened_father(underscore, a, -0.03473285998440214) :-  /* #neg=7 */ 
   male(a),
   !. // Flattened version of clause #2.

flattened_father(underscore, underscore, -0.06400662629565888) :-  /* #neg=6 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   male(b)
%   childof(b, a)
%   male(a)

% Saving model in: Father/train/models/bRDNs/father.model.ckpt
% Time taken to learn 24 trees is 1.639 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0019740374825219214
Set score:4.935093706304803E-4
% Only 18 out of 18 converged.
% Kept 5 of the 5 positive examples.
% Kept 9 of the 21 negative examples.
% Dataset size: 14
Computing probabilities
prob time:1 milliseconds
No hidden examples for : father
Time to build dataset: 1 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.004553461197649447
Set score:4.935093706304803E-4
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 7 positive seeds: 0 3 4 5 6 7 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 14.0/14.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 14.0/14.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 14.0/14.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.061358 (regressionFit = 0.061357, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 10.0/14.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.061358): father(A, _) :- male(A).  [covers 10.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.039717 (regressionFit = 0.039716, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 9.0/14.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.039717): father(_, A) :- male(A).  [covers 9.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.062435 (regressionFit = 0.062434, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 7.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.062912 (regressionFit = 0.062911, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 5.0/14.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 9.0/14.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 9.0/14.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(_, A) :- male(A).  [covers 9.0/14.0 pos, 0.0/0.0 neg]
Comparing variance: 0.0018328158533471159 to score=4.935093706304803E-4 #egs=9.0
Comparing variance: 0.0046441176930155145 to score=4.935093706304803E-4 #egs=5.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 9.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.001833)
%         ILP node to extend: father(_, A) :- male(A).  [covers 9.0/14.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0.001833) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #1: 2 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(_, A) :- male(A).  [covers 9.0/14.0 pos, 0.0/0.0 neg]
% This clause covers 9 positive examples, of which 9 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'father(_, A) :- male(A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]'
%     Score = -0.039717 (regressionFit = 0.039716, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% Have these 7 positive seeds: 0 1 2 3 4 5 6
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'father(_, A) :- male(A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]' score=-0.03971705114520162
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]
%     Score = -0.000014 (regressionFit = 0.000012, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5.0/9.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000014): father(A, B) :- male(B), childof(B, A).  [covers 5.0/9.0 pos, 0.0/0.0 neg]
%     Score = -0.014702 (regressionFit = 0.014700, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 4.0/9.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/9.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5.0/9.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.002.
% Will extend: father(A, B) :- male(B), childof(B, A).  [covers 5.0/9.0 pos, 0.0/0.0 neg]
Comparing variance: 2.4373585769062874E-6 to score=4.935093706304803E-4 #egs=5.0
Comparing variance: 0.0 to score=4.935093706304803E-4 #egs=4.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 5.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 4.0 < 2.1 * minPosCov = 6.3

% Time for loop #2: 2 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      father(A, B) :- male(B), childof(B, A).  [covers 5.0/9.0 pos, 0.0/0.0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #25 @ 12:29:21 4/20/17.  [Using 1,657,736 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( male(B) )
%   then if ( childof(B, A) )
%   | then return 0.05253742454387693;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.03358702116846296;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07220851584937413;  // std dev = 0.152, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


% Clauses:

father(A, B, 0.05253742454387693) :- 
     male(B), 
     childof(B, A), 
     !. // Clause #1.

father(A, B, -0.03358702116846296) :- 
     male(B), 
     !. // Clause #2.

father(A, B, -0.07220851584937413) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_father(a, b, 0.05253742454387693) :-  /* #pos=5 */ 
   male(b),
   childof(b, a),
   !. // Flattened version of clause #1.

flattened_father(underscore, a, -0.03358702116846296) :-  /* #neg=4 */ 
   male(a),
   !. // Flattened version of clause #2.

flattened_father(underscore, underscore, -0.07220851584937413) :-  /* #neg=5 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   male(b)
%   childof(b, a)
%   male(a)

% Saving model in: Father/train/models/bRDNs/father.model.ckpt


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for father.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).
stepLength_tree11(1.0).
stepLength_tree12(1.0).
stepLength_tree13(1.0).
stepLength_tree14(1.0).
stepLength_tree15(1.0).
stepLength_tree16(1.0).
stepLength_tree17(1.0).
stepLength_tree18(1.0).
stepLength_tree19(1.0).
stepLength_tree20(1.0).
stepLength_tree21(1.0).
stepLength_tree22(1.0).
stepLength_tree23(1.0).
stepLength_tree24(1.0).
stepLength_tree25(1.0).

logPrior(-1.8).
father(D, E, Total) :- // A general accessor. 
   father(D, E, 1000000, Total), !.
father(D, E, Total) :- waitHere("This should not fail", father(D, E, Total)).

father(D, E, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_father_tree1(D, E, TreesToUse, Total1),
   getScore_father_tree2(D, E, TreesToUse, Total2),
   getScore_father_tree3(D, E, TreesToUse, Total3),
   getScore_father_tree4(D, E, TreesToUse, Total4),
   getScore_father_tree5(D, E, TreesToUse, Total5),
   getScore_father_tree6(D, E, TreesToUse, Total6),
   getScore_father_tree7(D, E, TreesToUse, Total7),
   getScore_father_tree8(D, E, TreesToUse, Total8),
   getScore_father_tree9(D, E, TreesToUse, Total9),
   getScore_father_tree10(D, E, TreesToUse, Total10),
   getScore_father_tree11(D, E, TreesToUse, Total11),
   getScore_father_tree12(D, E, TreesToUse, Total12),
   getScore_father_tree13(D, E, TreesToUse, Total13),
   getScore_father_tree14(D, E, TreesToUse, Total14),
   getScore_father_tree15(D, E, TreesToUse, Total15),
   getScore_father_tree16(D, E, TreesToUse, Total16),
   getScore_father_tree17(D, E, TreesToUse, Total17),
   getScore_father_tree18(D, E, TreesToUse, Total18),
   getScore_father_tree19(D, E, TreesToUse, Total19),
   getScore_father_tree20(D, E, TreesToUse, Total20),
   getScore_father_tree21(D, E, TreesToUse, Total21),
   getScore_father_tree22(D, E, TreesToUse, Total22),
   getScore_father_tree23(D, E, TreesToUse, Total23),
   getScore_father_tree24(D, E, TreesToUse, Total24),
   getScore_father_tree25(D, E, TreesToUse, Total25),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10 + Total11 + Total12 + Total13 + Total14 + Total15 + Total16 + Total17 + Total18 + Total19 + Total20 + Total21 + Total22 + Total23 + Total24 + Total25,
   !.
father(D, E, TreesToUse, Total) :- waitHere("This should not fail", father(D, E, TreesToUse, Total)).

getScore_father_tree1(D, E, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_father_tree1(D, E, TreesToUse, Total1) :- father_tree1(D, E, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_father_tree2(D, E, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_father_tree2(D, E, TreesToUse, Total2) :- father_tree2(D, E, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_father_tree3(D, E, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_father_tree3(D, E, TreesToUse, Total3) :- father_tree3(D, E, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_father_tree4(D, E, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_father_tree4(D, E, TreesToUse, Total4) :- father_tree4(D, E, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_father_tree5(D, E, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_father_tree5(D, E, TreesToUse, Total5) :- father_tree5(D, E, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_father_tree6(D, E, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_father_tree6(D, E, TreesToUse, Total6) :- father_tree6(D, E, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_father_tree7(D, E, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_father_tree7(D, E, TreesToUse, Total7) :- father_tree7(D, E, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_father_tree8(D, E, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_father_tree8(D, E, TreesToUse, Total8) :- father_tree8(D, E, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_father_tree9(D, E, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_father_tree9(D, E, TreesToUse, Total9) :- father_tree9(D, E, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_father_tree10(D, E, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_father_tree10(D, E, TreesToUse, Total10) :- father_tree10(D, E, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

getScore_father_tree11(D, E, TreesToUse, 0.0) :- 11 > TreesToUse, !.
getScore_father_tree11(D, E, TreesToUse, Total11) :- father_tree11(D, E, Total), stepLength_tree11(StepLen), Total11 is Total * StepLen.

getScore_father_tree12(D, E, TreesToUse, 0.0) :- 12 > TreesToUse, !.
getScore_father_tree12(D, E, TreesToUse, Total12) :- father_tree12(D, E, Total), stepLength_tree12(StepLen), Total12 is Total * StepLen.

getScore_father_tree13(D, E, TreesToUse, 0.0) :- 13 > TreesToUse, !.
getScore_father_tree13(D, E, TreesToUse, Total13) :- father_tree13(D, E, Total), stepLength_tree13(StepLen), Total13 is Total * StepLen.

getScore_father_tree14(D, E, TreesToUse, 0.0) :- 14 > TreesToUse, !.
getScore_father_tree14(D, E, TreesToUse, Total14) :- father_tree14(D, E, Total), stepLength_tree14(StepLen), Total14 is Total * StepLen.

getScore_father_tree15(D, E, TreesToUse, 0.0) :- 15 > TreesToUse, !.
getScore_father_tree15(D, E, TreesToUse, Total15) :- father_tree15(D, E, Total), stepLength_tree15(StepLen), Total15 is Total * StepLen.

getScore_father_tree16(D, E, TreesToUse, 0.0) :- 16 > TreesToUse, !.
getScore_father_tree16(D, E, TreesToUse, Total16) :- father_tree16(D, E, Total), stepLength_tree16(StepLen), Total16 is Total * StepLen.

getScore_father_tree17(D, E, TreesToUse, 0.0) :- 17 > TreesToUse, !.
getScore_father_tree17(D, E, TreesToUse, Total17) :- father_tree17(D, E, Total), stepLength_tree17(StepLen), Total17 is Total * StepLen.

getScore_father_tree18(D, E, TreesToUse, 0.0) :- 18 > TreesToUse, !.
getScore_father_tree18(D, E, TreesToUse, Total18) :- father_tree18(D, E, Total), stepLength_tree18(StepLen), Total18 is Total * StepLen.

getScore_father_tree19(D, E, TreesToUse, 0.0) :- 19 > TreesToUse, !.
getScore_father_tree19(D, E, TreesToUse, Total19) :- father_tree19(D, E, Total), stepLength_tree19(StepLen), Total19 is Total * StepLen.

getScore_father_tree20(D, E, TreesToUse, 0.0) :- 20 > TreesToUse, !.
getScore_father_tree20(D, E, TreesToUse, Total20) :- father_tree20(D, E, Total), stepLength_tree20(StepLen), Total20 is Total * StepLen.

getScore_father_tree21(D, E, TreesToUse, 0.0) :- 21 > TreesToUse, !.
getScore_father_tree21(D, E, TreesToUse, Total21) :- father_tree21(D, E, Total), stepLength_tree21(StepLen), Total21 is Total * StepLen.

getScore_father_tree22(D, E, TreesToUse, 0.0) :- 22 > TreesToUse, !.
getScore_father_tree22(D, E, TreesToUse, Total22) :- father_tree22(D, E, Total), stepLength_tree22(StepLen), Total22 is Total * StepLen.

getScore_father_tree23(D, E, TreesToUse, 0.0) :- 23 > TreesToUse, !.
getScore_father_tree23(D, E, TreesToUse, Total23) :- father_tree23(D, E, Total), stepLength_tree23(StepLen), Total23 is Total * StepLen.

getScore_father_tree24(D, E, TreesToUse, 0.0) :- 24 > TreesToUse, !.
getScore_father_tree24(D, E, TreesToUse, Total24) :- father_tree24(D, E, Total), stepLength_tree24(StepLen), Total24 is Total * StepLen.

getScore_father_tree25(D, E, TreesToUse, 0.0) :- 25 > TreesToUse, !.
getScore_father_tree25(D, E, TreesToUse, Total25) :- father_tree25(D, E, Total), stepLength_tree25(StepLen), Total25 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(father, 4, [
   siblingof(a, underscore),
   childof(b, a),
   male(b),
   male(a)]).
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:10.672366091746046
Set score:4.935093706304803E-4
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 4 positive seeds: 48 83 141 224
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 261.0/261.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 261.0/261.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 261.0/261.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -2,708.534445 (regressionFit = 2,708.534444, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 186.0/261.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -2,708.534445): father(A, _) :- male(A).  [covers 186.0/261.0 pos, 0.0/0.0 neg]
%     Score = -1,717.628125 (regressionFit = 1,717.628124, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 186.0/261.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -1,717.628125): father(_, A) :- male(A).  [covers 186.0/261.0 pos, 0.0/0.0 neg]
%     Score = -742.914583 (regressionFit = 742.914582, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 137.0/261.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -742.914583): father(A, B) :- childof(B, A).  [covers 137.0/261.0 pos, 0.0/0.0 neg]
%     Score = -2,684.538138 (regressionFit = 2,684.538136, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 133.0/261.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 137.0/261.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 137.0/261.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: father(A, B) :- childof(B, A).  [covers 137.0/261.0 pos, 0.0/0.0 neg]
Comparing variance: 5.402798140995557 to score=4.935093706304803E-4 #egs=137.0
Comparing variance: 0.022026104122292302 to score=4.935093706304803E-4 #egs=124.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 137.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-5.402798)
%         ILP node to extend: father(A, B) :- childof(B, A).  [covers 137.0/261.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -5.402798) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 124.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.022026)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0.022026) into the LAST position (#2) in the search queue.

% Time for loop #1: 5 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      father(A, B) :- childof(B, A).  [covers 137.0/261.0 pos, 0.0/0.0 neg]
% This clause covers 137 positive examples, of which 137 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'father(A, B) :- childof(B, A).  [covers 137.0/137.0 pos, 0.0/0.0 neg]'
%     Score = -742.914583 (regressionFit = 742.914582, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 137.0/137.0 pos, 0.0/0.0 neg]

% Have these 7 positive seeds: 12 13 16 29 53 55 61
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'father(A, B) :- childof(B, A).  [covers 137.0/137.0 pos, 0.0/0.0 neg]' score=-742.9145832475556
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -726.776334 (regressionFit = 726.776332, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(A).  [covers 112.0/137.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -726.776334): father(A, B) :- childof(B, A), male(A).  [covers 112.0/137.0 pos, 0.0/0.0 neg]
%     Score = -0.625326 (regressionFit = 0.625324, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(B).  [covers 125.0/137.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.625326): father(A, B) :- childof(B, A), male(B).  [covers 125.0/137.0 pos, 0.0/0.0 neg]
%     Score = -667.525984 (regressionFit = 667.525981, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _).  [covers 75.0/137.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A), male(B).  [covers 125.0/137.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A), male(B).  [covers 125.0/137.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -5.403.
% Will extend: father(A, B) :- childof(B, A), male(B).  [covers 125.0/137.0 pos, 0.0/0.0 neg]
Comparing variance: 0.0050025901670233 to score=4.935093706304803E-4 #egs=125.0
Comparing variance: 3.552713678800501E-15 to score=4.935093706304803E-4 #egs=12.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 125.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0.005003)
%         ILP node to extend: father(A, B) :- childof(B, A), male(B).  [covers 125.0/137.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0.005003) into the LAST position (#2) in the search queue.
%   Creating a FALSE-branch leaf because good enough fit since score < 4.935093706304803E-4

% Time for loop #2: 5 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      father(A, B) :- childof(B, A), male(B).  [covers 125.0/137.0 pos, 0.0/0.0 neg]
% This clause covers 125 positive examples, of which 125 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 7 positive seeds: 6 11 17 28 43 53 55
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 124.0/124.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 124.0/124.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #3, bodyLen=0] 'father(_, _).  [covers 124.0/124.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -2.729917 (regressionFit = 2.729916, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 74.0/124.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -2.729917): father(A, _) :- male(A).  [covers 74.0/124.0 pos, 0.0/0.0 neg]
%     Score = -2.108348 (regressionFit = 2.108347, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 61.0/124.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -2.108348): father(_, A) :- male(A).  [covers 61.0/124.0 pos, 0.0/0.0 neg]
%     Score = -2.708093 (regressionFit = 2.708092, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 23.0/124.0 pos, 0.0/0.0 neg]
%     Score = -2.540930 (regressionFit = 2.540929, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 58.0/124.0 pos, 0.0/0.0 neg]
%     Score = -2.708093 (regressionFit = 2.708092, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 23.0/124.0 pos, 0.0/0.0 neg]
%     Score = -2.708093 (regressionFit = 2.708092, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 23.0/124.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 61.0/124.0 pos, 0.0/0.0 neg]

% The best node found: father(_, A) :- male(A).  [covers 61.0/124.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.022.
% Will extend: father(_, A) :- male(A).  [covers 61.0/124.0 pos, 0.0/0.0 neg]
Comparing variance: 0.01977904259813812 to score=4.935093706304803E-4 #egs=61.0
Comparing variance: 0.014314692725522923 to score=4.935093706304803E-4 #egs=63.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 61.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0.019779)
%         ILP node to extend: father(_, A) :- male(A).  [covers 61.0/124.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0.019779) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 63.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0.014315)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0.014315) into position #2 in the search queue (new size=3).

% Time for loop #3: 3 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      father(_, A) :- male(A).  [covers 61.0/124.0 pos, 0.0/0.0 neg]
% This clause covers 61 positive examples, of which 61 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'father(_, A) :- male(A).  [covers 61.0/61.0 pos, 0.0/0.0 neg]'
%     Score = -2.108348 (regressionFit = 2.108347, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 61.0/61.0 pos, 0.0/0.0 neg]

% Have these 4 positive seeds: 8 33 40 41
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #4, bodyLen=1] 'father(_, A) :- male(A).  [covers 61.0/61.0 pos, 0.0/0.0 neg]' score=-2.1083483601943693
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -1.206215 (regressionFit = 1.206213, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 38.0/61.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -1.206215): father(A, B) :- male(B), male(A).  [covers 38.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.832442 (regressionFit = 0.832440, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(A, B).  [covers 23.0/61.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.832442): father(A, B) :- male(B), siblingof(A, B).  [covers 23.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.232207 (regressionFit = 0.232205, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 33.0/61.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.232207): father(A, B) :- male(B), siblingof(A, _).  [covers 33.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.832442 (regressionFit = 0.832440, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(B, A).  [covers 23.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.832442 (regressionFit = 0.832440, penalties=2.2300000000000002E-6) for clause:  father(_, A) :- male(A), siblingof(A, _).  [covers 23.0/61.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), siblingof(A, _).  [covers 33.0/61.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), siblingof(A, _).  [covers 33.0/61.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -0.020.
% Will extend: father(A, B) :- male(B), siblingof(A, _).  [covers 33.0/61.0 pos, 0.0/0.0 neg]
Comparing variance: 0.006581018369026349 to score=4.935093706304803E-4 #egs=33.0
Comparing variance: 5.368296211567218E-4 to score=4.935093706304803E-4 #egs=28.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 33.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0.006581)
%         ILP node to extend: father(A, B) :- male(B), siblingof(A, _).  [covers 33.0/61.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0.006581) into position #2 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 28.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0.000537)
%         ILP node to extend: father(_, A) :- male(A).  [covers 61.0/61.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0.000537) into the LAST position (#4) in the search queue.

% Time for loop #4: 3 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      father(A, B) :- male(B), siblingof(A, _).  [covers 33.0/61.0 pos, 0.0/0.0 neg]
% This clause covers 33 positive examples, of which 33 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 7 positive seeds: 6 10 11 17 19 33 36
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 63.0/63.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 63.0/63.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #5, bodyLen=0] 'father(_, _).  [covers 63.0/63.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -0.886178 (regressionFit = 0.886177, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 36.0/63.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.886178): father(A, _) :- male(A).  [covers 36.0/63.0 pos, 0.0/0.0 neg]
%     Score = -0.861018 (regressionFit = 0.861017, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 25.0/63.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.861018): father(A, _) :- siblingof(A, _).  [covers 25.0/63.0 pos, 0.0/0.0 neg]

% The best node found: father(A, _) :- siblingof(A, _).  [covers 25.0/63.0 pos, 0.0/0.0 neg]

% The best node found: father(A, _) :- siblingof(A, _).  [covers 25.0/63.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -0.014.
% Will extend: father(A, _) :- siblingof(A, _).  [covers 25.0/63.0 pos, 0.0/0.0 neg]
Comparing variance: 0.021000748074670027 to score=4.935093706304803E-4 #egs=25.0
Comparing variance: 0.008842063943685568 to score=4.935093706304803E-4 #egs=38.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 25.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0.021001)
%         ILP node to extend: father(A, _) :- siblingof(A, _).  [covers 25.0/63.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0.021001) into position #1 in the search queue (new size=4).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 38.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0.008842)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0.008842) into position #2 in the search queue (new size=5).

% Time for loop #5: 2 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      father(A, _) :- siblingof(A, _).  [covers 25.0/63.0 pos, 0.0/0.0 neg]
% This clause covers 25 positive examples, of which 25 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'father(A, _) :- siblingof(A, _).  [covers 25.0/25.0 pos, 0.0/0.0 neg]'
%     Score = -0.861018 (regressionFit = 0.861017, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 25.0/25.0 pos, 0.0/0.0 neg]

% Have these 5 positive seeds: 0 4 10 17 18
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #6, bodyLen=1] 'father(A, _) :- siblingof(A, _).  [covers 25.0/25.0 pos, 0.0/0.0 neg]' score=-0.8610183617268022
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 17 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 25.0/25.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 25.0/25.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 25.0/25.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 25.0/25.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 25.0/25.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -0.8610):
%  father(A, _) :- siblingof(A, _).  [covers 25.0/25.0 pos, 0.0/0.0 neg]
Created a leaf under (father(D, E) :- siblingof(D, Anon5981))

% Have these 6 positive seeds: 1 8 10 24 25 32
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 38.0/38.0 pos, 0.0/0.0 neg]
% Most-general root: father(_, _).  [covers 38.0/38.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #7, bodyLen=0] 'father(_, _).  [covers 38.0/38.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 1 items to OPEN for evaluation and possible insertion.
% Have created 1 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -0.195279 (regressionFit = 0.195277, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 11.0/38.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.195279): father(A, _) :- male(A).  [covers 11.0/38.0 pos, 0.0/0.0 neg]

% The best node found: father(A, _) :- male(A).  [covers 11.0/38.0 pos, 0.0/0.0 neg]

% The best node found: father(A, _) :- male(A).  [covers 11.0/38.0 pos, 0.0/0.0 neg]

% Expanding node at Level 3 with score = -0.009.
% Will extend: father(A, _) :- male(A).  [covers 11.0/38.0 pos, 0.0/0.0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #7: 2 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      father(A, _) :- male(A).  [covers 11.0/38.0 pos, 0.0/0.0 neg]
% This clause covers 11 positive examples, of which 11 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'father(A, B) :- male(B), siblingof(A, _).  [covers 33.0/33.0 pos, 0.0/0.0 neg]'
%     Score = -0.232207 (regressionFit = 0.232205, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 33.0/33.0 pos, 0.0/0.0 neg]

% Have these 7 positive seeds: 0 3 7 15 16 18 21
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #8, bodyLen=2] 'father(A, B) :- male(B), siblingof(A, _).  [covers 33.0/33.0 pos, 0.0/0.0 neg]' score=-0.23220696557025772
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -0.198332 (regressionFit = 0.198329, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), male(A).  [covers 23.0/33.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.198332): father(A, B) :- male(B), siblingof(A, _), male(A).  [covers 23.0/33.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), male(C).  [covers 33.0/33.0 pos, 0.0/0.0 neg]
%     Score = -0.198332 (regressionFit = 0.198329, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(A, B).  [covers 23.0/33.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(A, _).  [covers 33.0/33.0 pos, 0.0/0.0 neg]
%     Score = -0.198332 (regressionFit = 0.198329, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(B, A).  [covers 23.0/33.0 pos, 0.0/0.0 neg]
%     Score = -0.198332 (regressionFit = 0.198329, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(B, C).  [covers 23.0/33.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.198332): father(A, B) :- male(B), siblingof(A, C), siblingof(B, C).  [covers 23.0/33.0 pos, 0.0/0.0 neg]
%     Score = -0.198332 (regressionFit = 0.198329, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(B, _).  [covers 23.0/33.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(C, A).  [covers 33.0/33.0 pos, 0.0/0.0 neg]
%     Score = -0.198332 (regressionFit = 0.198329, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(C, B).  [covers 23.0/33.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(C, _).  [covers 33.0/33.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), siblingof(A, C), siblingof(B, C).  [covers 23.0/33.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- male(B), siblingof(A, C), siblingof(B, C).  [covers 23.0/33.0 pos, 0.0/0.0 neg]

% Expanding node at Level 3 with score = -0.007.
% Will extend: father(A, B) :- male(B), siblingof(A, C), siblingof(B, C).  [covers 23.0/33.0 pos, 0.0/0.0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #8: 11 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      father(A, B) :- male(B), siblingof(A, C), siblingof(B, C).  [covers 23.0/33.0 pos, 0.0/0.0 neg]
% This clause covers 23 positive examples, of which 23 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'father(A, B) :- childof(B, A), male(B).  [covers 125.0/125.0 pos, 0.0/0.0 neg]'
%     Score = -0.625326 (regressionFit = 0.625324, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(B).  [covers 125.0/125.0 pos, 0.0/0.0 neg]

% Have these 3 positive seeds: 30 73 80
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #9, bodyLen=2] 'father(A, B) :- childof(B, A), male(B).  [covers 125.0/125.0 pos, 0.0/0.0 neg]' score=-0.6253257908779551
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.521106 (regressionFit = 0.521103, penalties=2.920000000000001E-6) for clause:  father(A, B) :- childof(B, A), male(B), male(A).  [covers 100.0/125.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.521106): father(A, B) :- childof(B, A), male(B), male(A).  [covers 100.0/125.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = -2.04636e-12, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- childof(B, A), male(B), siblingof(A, _).  [covers 75.0/125.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000003): father(A, B) :- childof(B, A), male(B), siblingof(A, _).  [covers 75.0/125.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A), male(B), siblingof(A, _).  [covers 75.0/125.0 pos, 0.0/0.0 neg]

% The best node found: father(A, B) :- childof(B, A), male(B), siblingof(A, _).  [covers 75.0/125.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -0.005.
% Will extend: father(A, B) :- childof(B, A), male(B), siblingof(A, _).  [covers 75.0/125.0 pos, 0.0/0.0 neg]
Comparing variance: 0.0 to score=4.935093706304803E-4 #egs=75.0
Comparing variance: -4.092726157978177E-14 to score=4.935093706304803E-4 #egs=50.0
%   Creating a TRUE-branch leaf because good enough fit since score < 4.935093706304803E-4
%   Creating a FALSE-branch leaf because good enough fit since score < 4.935093706304803E-4

% Time for loop #9: 7 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      father(A, B) :- childof(B, A), male(B), siblingof(A, _).  [covers 75.0/125.0 pos, 0.0/0.0 neg]
% This clause covers 75 positive examples, of which 75 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (father(D, E) :- siblingof(D, Anon5867))

%%%%%  WILL-Produced Tree Combined @ 12:29:21 4/20/17.  [Using 1,715,832 memory cells.]  %%%%%


% FOR father(A, B):
%   if ( childof(B, A) )
%   then if ( male(B) )
%   | then if ( siblingof(A, C) )
%   | | then return 5.435330771522146;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else return 5.579705719819889;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return -2.7255748144660648;  // std dev = 2.06e-07, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( male(B) )
%   | then if ( siblingof(A, D) )
%   | | then if ( siblingof(B, D) )
%   | | | then return -0.8001049013171296;  // std dev = 0.445, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.7481065746149289;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -1.0379652169574174;  // std dev = 0.023, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( siblingof(A, E) )
%   | | then return -0.7903715073366225;  // std dev = 0.145, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( male(A) )
%   | | | then return -0.6430103027577033;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.7771919455993804;  // std dev = 0.442, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */


% Clauses:

father(A, B, 5.435330771522146) :- 
     childof(B, A), 
     male(B), 
     siblingof(A, C), 
     !. // Clause #1.

father(A, B, 5.579705719819889) :- 
     childof(B, A), 
     male(B), 
     !. // Clause #2.

father(A, B, -2.7255748144660648) :- 
     childof(B, A), 
     !. // Clause #3.

father(A, B, -0.8001049013171296) :- 
     male(B), 
     siblingof(A, C), 
     siblingof(B, C), 
     !. // Clause #4.

father(A, B, -0.7481065746149289) :- 
     male(B), 
     siblingof(A, C), 
     !. // Clause #5.

father(A, B, -1.0379652169574174) :- 
     male(B), 
     !. // Clause #6.

father(A, B, -0.7903715073366225) :- 
     siblingof(A, C), 
     !. // Clause #7.

father(A, B, -0.6430103027577033) :- 
     male(A), 
     !. // Clause #8.

father(A, B, -0.7771919455993804) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_father(a, b, 5.435330771522146) :-  /* #pos=75 */ 
   childof(b, a),
   male(b),
   siblingof(a, underscore),
   !. // Flattened version of clause #1.

flattened_father(a, b, 5.579705719819889) :-  /* #pos=50 */ 
   childof(b, a),
   male(b),
   !. // Flattened version of clause #2.

flattened_father(a, b, -2.7255748144660648) :-  /* #neg=12 */ 
   childof(b, a),
   !. // Flattened version of clause #3.

flattened_father(a, b, -0.8001049013171296) :-  /* #neg=23 */ 
   male(b),
   siblingof(a, uniqueVar1),
   siblingof(b, uniqueVar1),
   !. // Flattened version of clause #4.

flattened_father(a, b, -0.7481065746149289) :-  /* #neg=10 */ 
   male(b),
   siblingof(a, underscore),
   !. // Flattened version of clause #5.

flattened_father(underscore, a, -1.0379652169574174) :-  /* #neg=28 */ 
   male(a),
   !. // Flattened version of clause #6.

flattened_father(a, underscore, -0.7903715073366225) :-  /* #neg=25 */ 
   siblingof(a, underscore),
   !. // Flattened version of clause #7.

flattened_father(a, underscore, -0.6430103027577033) :-  /* #neg=11 */ 
   male(a),
   !. // Flattened version of clause #8.

flattened_father(underscore, underscore, -0.7771919455993804) :-  /* #neg=27 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   siblingof(a, underscore)
%   siblingof(a, uniqueVar1)
%   siblingof(b, uniqueVar1)
%   childof(b, a)
%   male(b)
%   male(a)

% Time taken to learn model for 'father': 1.830 seconds.
% Saving model in: Father/train/models/bRDNs/father.model
cached groundings hit: 0
Misses: 0

% Total learning time (25 trees): 2.076 seconds.
